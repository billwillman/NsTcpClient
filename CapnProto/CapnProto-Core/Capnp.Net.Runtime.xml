<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Capnp.Net.Runtime</name>
    </assembly>
    <members>
        <member name="T:Capnp.AnyPointer">
            <summary>
            Generic <see cref="T:Capnp.ICapnpSerializable"/> implementation, based on a wrapper around <see cref="T:Capnp.DeserializerState"/>.
            </summary>
        </member>
        <member name="P:Capnp.AnyPointer.State">
            <summary>
            The <see cref="T:Capnp.DeserializerState"/> will be set by the Deserialize method.
            </summary>
        </member>
        <member name="M:Capnp.AnyPointer.Deserialize(Capnp.DeserializerState)">
            <summary>
            Sets the State property.
            </summary>
            <param name="state">deserializer state</param>
        </member>
        <member name="M:Capnp.AnyPointer.Serialize(Capnp.SerializerState)">
            <summary>
            Performs a deep copy from State to given state.
            </summary>
            <param name="state">serializer state</param>
        </member>
        <member name="T:Capnp.CapnpSerializable">
            <summary>
            Provides functionality to construct domain objects from <see cref="T:Capnp.DeserializerState"/>.
            </summary>
        </member>
        <member name="M:Capnp.CapnpSerializable.Create``1(Capnp.DeserializerState)">
            <summary>
            Constructs a domain object from a given deserializer state.
            </summary>
            <typeparam name="T">Type of domain object to construct. Must be one of the following:
            <list type="bullet">
            <item><description>Type implementing <see cref="T:Capnp.ICapnpSerializable"/>. The type must must have a public parameterless constructor.</description></item>
            <item><description>A capability interface (<seealso cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException"/> for further explanation)</description></item>
            <item><description><see cref="T:System.String"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></description></item>
            <item><description><see cref="T:System.Collections.Generic.IReadOnlyList`1"/> whereby T is one of the things listed here.</description></item>
            </list>
            </typeparam>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Capnp.DeserializationException">
            <summary>
            This exception gets thrown when a Cap'n Proto object could not be deserialized correctly.
            </summary>
        </member>
        <member name="M:Capnp.DeserializationException.#ctor(System.String)">
            <summary>
            Constructs an instance
            </summary>
        </member>
        <member name="M:Capnp.DeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an instance with message and inner exception
            </summary>
        </member>
        <member name="T:Capnp.DeserializerState">
            <summary>
            Implements the heart of deserialization. This stateful helper struct exposes all functionality to traverse serialized data.
            Although it is public, you should not use it directly. Instead, use the reader, writer, and domain class adapters which are produced
            by the code generator.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.Segments">
            <summary>
            A wire message is essentially a collection of memory blocks.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.CurrentSegmentIndex">
            <summary>
            Index of the segment (into the Segments property) which this state currently refers to.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.Offset">
            <summary>
            Word offset within the current segment which this state currently refers to.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.BytesTraversedOrData">
            <summary>
            Context-dependent meaning: Usually the number of bytes traversed until this state was reached, to prevent amplification attacks.
            However, if this state is of Kind == ObjectKind.Value (an artificial category which will never occur on the wire but is used to
            internally represent lists of primitives as lists of structs), it contains the primitive's value.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.ListElementCount">
            <summary>
            If this state currently represents a list, the number of list elements.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.StructDataCount">
            <summary>
            If this state currently represents a struct, the struct's data section word count.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.StructPtrCount">
            <summary>
            If this state currently represents a struct, the struct's pointer section word count.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.Kind">
            <summary>
            The kind of object this state currently represents.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.Caps">
            <summary>
            The capabilities imported from the capability table. Only valid in RPC context.
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.CurrentSegment">
            <summary>
            Current segment (essentially Segments[CurrentSegmentIndex]
            </summary>
        </member>
        <member name="M:Capnp.DeserializerState.CreateRoot(Capnp.WireFrame)">
            <summary>
            Constructs a state representing a message root object.
            </summary>
            <param name="frame">the message</param>
            <returns></returns>
        </member>
        <member name="M:Capnp.DeserializerState.op_Implicit(Capnp.SerializerState)~Capnp.DeserializerState">
            <summary>
            Implicitly converts a serializer state into a deserializer state.
            The conversion is cheap, since it does not involve copying any payload.
            </summary>
            <param name="state">The serializer state to be converted</param>
        </member>
        <member name="M:Capnp.DeserializerState.MakeValueState(System.UInt32)">
            <summary>
            Constructs a state representing the given value. This kind of state is artificial and beyond the Cap'n Proto specification.
            We need it to internally represent list of primitive values as lists of structs.
            </summary>
        </member>
        <member name="M:Capnp.DeserializerState.IncrementBytesTraversed(System.UInt32)">
            <summary>
            Increments the number of bytes traversed and checks the results against the traversal limit.
            </summary>
            <param name="additionalBytesTraversed">Amount to increase the traversed bytes</param>
        </member>
        <member name="P:Capnp.DeserializerState.StructDataSection">
            <summary>
            Memory span which represents this struct's data section (given this state actually represents a struct)
            </summary>
        </member>
        <member name="P:Capnp.DeserializerState.RawData">
            <summary>
            If this state represents a list of primitive values, returns the raw list data.
            </summary>
        </member>
        <member name="M:Capnp.DeserializerState.DecodePointer(System.Int32)">
            <summary>
            Interprets a pointer within the current segment and mutates this state to represent the pointer's target.
            </summary>
            <param name="offset">word offset relative to this.Offset within current segment</param>
            <exception cref="T:System.IndexOutOfRangeException">offset negative or out of range</exception>
            <exception cref="T:Capnp.DeserializationException">invalid pointer data or traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.DecodeCapPointer(System.Int32)">
            <summary>
            Interprets a pointer within the current segment as capability pointer and returns the according low-level capability object from
            the capability table. Does not mutate this state.
            </summary>
            <param name="offset">Offset relative to this.Offset within current segment</param>
            <returns>the low-level capability object</returns>
            <exception cref="T:System.IndexOutOfRangeException">offset negative or out of range</exception>
            <exception cref="T:System.InvalidOperationException">capability table not set</exception>
            <exception cref="T:Capnp.Rpc.RpcException">not a capability pointer or invalid capability index</exception>
        </member>
        <member name="M:Capnp.DeserializerState.StructReadData(System.UInt64,System.Int32)">
            <summary>
            Reads a slice of up to 64 bits from this struct's data section, starting from the specified bit offset.
            The slice must be aligned within a 64 bit word boundary.
            </summary>
            <param name="bitOffset">Start bit offset relative to the data section, little endian</param>
            <param name="bitCount">numbers of bits to read</param>
            <returns>the data</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">non-aligned access</exception>
            <exception cref="T:System.IndexOutOfRangeException">bitOffset exceeds the data section</exception>
            <exception cref="T:Capnp.DeserializationException">this state does not represent a struct</exception>
        </member>
        <member name="M:Capnp.DeserializerState.StructReadPointer(System.Int32)">
            <summary>
            Decodes a pointer from this struct's pointer section and returns the state representing the pointer target.
            It is valid to specify an index beyond the pointer section, in which case a default state (representing the "null object")
            will be returned. This is to preserve upward compatibility with schema evolution.
            </summary>
            <param name="index">Index within the pointer section</param>
            <returns>the target state</returns>
            <exception cref="T:Capnp.DeserializationException">this state does not represent a struct,
            invalid pointer, or traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.RequireList">
            <summary>
            Given this state represents a list (of anything), returns a ListDeserializer to further decode the list content.
            </summary>
            <exception cref="T:Capnp.DeserializationException">state does not represent a list</exception>
        </member>
        <member name="M:Capnp.DeserializerState.RequireCapList``1">
            <summary>
            Given this state represents a list of pointers, returns a ListOfCapsDeserializer for decoding it as list of capabilities.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
            <exception cref="T:Capnp.DeserializationException">state does not represent a list of pointers</exception>
        </member>
        <member name="M:Capnp.DeserializerState.ReadText(System.Int32,System.String)">
            <summary>
            Convenience method. Given this state represents a struct, decodes text field from its pointer table.
            </summary>
            <param name="index">index within this struct's pointer table</param>
            <param name="defaultText">default text to return of pointer is null</param>
            <returns>the decoded text, or defaultText (which might be null)</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a struct, invalid pointer,
            non-list-of-bytes pointer, traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.ReadList(System.Int32)">
            <summary>
            Convenience method. Given this state represents a struct, decodes a list deserializer field from its pointer table.
            </summary>
            <param name="index">index within this struct's pointer table</param>
            <returns>the list deserializer instance</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a struct, invalid pointer,
            non-list pointer, traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.ReadCapList``1(System.Int32)">
            <summary>
            Convenience method. Given this state represents a struct, decodes a capability list field from its pointer table.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
            <param name="index">index within this struct's pointer table</param>
            <returns>the capability list deserializer instance</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a struct, invalid pointer,
            non-list-of-pointers pointer, traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.ReadListOfStructs``1(System.Int32,System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Convenience method. Given this state represents a struct, decodes a list of structs field from its pointer table.
            </summary>
            <typeparam name="T">Struct target representation type</typeparam>
            <param name="index">index within this struct's pointer table</param>
            <param name="cons">constructs a target representation type instance from the underlying deserializer state</param>
            <returns>the decoded list of structs</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a struct, invalid pointer,
            non-list-of-{structs,pointers} pointer, traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.ReadStruct``1(System.Int32,System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Convenience method. Given this state represents a struct, decodes a struct field from its pointer table.
            </summary>
            <typeparam name="T">Struct target representation type</typeparam>
            <param name="index">index within this struct's pointer table</param>
            <param name="cons">constructs a target representation type instance from the underlying deserializer state</param>
            <returns>the decoded struct</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a struct, invalid pointer,
            non-struct pointer, traversal limit exceeded</exception>
        </member>
        <member name="P:Capnp.DeserializerState.CapabilityIndex">
            <summary>
            Given this state represents a capability, returns its index into the capability table.
            </summary>
        </member>
        <member name="M:Capnp.DeserializerState.ReadCap``1(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Given this state represents a struct, decodes a capability field from its pointer table.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
            <param name="index">index within this struct's pointer table</param>
            <param name="memberName">debugging aid</param>
            <param name="sourceFilePath">debugging aid</param>
            <param name="sourceLineNumber">debugging aid</param>
            <returns>capability instance or null if pointer was null</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a struct, invalid pointer,
            non-capability pointer, traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.ReadCap(System.Int32)">
            <summary>
            Given this state represents a struct, decodes a capability field from its pointer table and
            returns it as bare (generic) proxy.
            </summary>
            <param name="index">index within this struct's pointer table</param>
            <returns>capability instance or null if pointer was null</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a struct, invalid pointer,
            non-capability pointer, traversal limit exceeded</exception>
        </member>
        <member name="M:Capnp.DeserializerState.RequireCap``1">
            <summary>
            Given this state represents a capability, wraps it into a proxy instance for the desired interface.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
            <returns>capability instance or null if pointer was null</returns>
            <exception cref="T:System.IndexOutOfRangeException">negative index</exception>
            <exception cref="T:Capnp.DeserializationException">state does not represent a capability</exception>
        </member>
        <member name="T:Capnp.DynamicSerializerState">
            <summary>
            This SerializerState specialization provides functionality to build arbitrary Cap'n Proto objects without requiring the schema code generator.
            </summary>
        </member>
        <member name="M:Capnp.DynamicSerializerState.#ctor">
            <summary>
            Constructs an unbound instance.
            </summary>
        </member>
        <member name="M:Capnp.DynamicSerializerState.#ctor(Capnp.MessageBuilder)">
            <summary>
            Constructs an instance and binds it to the given <see cref="T:Capnp.MessageBuilder"/>.
            </summary>
            <param name="messageBuilder">message builder</param>
        </member>
        <member name="M:Capnp.DynamicSerializerState.CreateForRpc">
            <summary>
            Constructs an instance, binds it to a dedicated message builder, and initializes the capability table for usage in RPC context.
            </summary>
        </member>
        <member name="M:Capnp.DynamicSerializerState.op_Explicit(Capnp.DeserializerState)~Capnp.DynamicSerializerState">
            <summary>
            Converts any <see cref="T:Capnp.DeserializerState"/> to a DynamicSerializerState instance, which involves deep copying the object graph.
            </summary>
            <param name="state">The deserializer state to convert</param>
        </member>
        <member name="M:Capnp.DynamicSerializerState.Link(System.Int32,Capnp.SerializerState,System.Boolean)">
            <summary>
            Links a sub-item (struct field or list element) of this state to another state. Usually, this operation is not necessary, since objects are constructed top-down.
            However, there might be some advanced scenarios where you want to reference the same object twice (also interesting for designing amplification attacks).
            The Cap'n Proto serialization intrinsically supports this, since messages are object graphs, not trees.
            </summary>
            <param name="slot">If this state describes a struct: Index into this struct's pointer table. 
            If this state describes a list of pointers: List element index.</param>
            <param name="target">state to be linked</param>
            <param name="allowCopy">Whether to deep copy the target state if it belongs to a different message builder than this state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="slot"/> out of range</exception>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>This state does neither describe a struct, nor a list of pointers</description></item>
            <item><description>Another state is already linked to the specified position (sorry, no overwrite allowed)</description></item>
            <item><description>This state and <paramref name="target"/> belong to different message builder, and<paramref name="allowCopy"/> is false</description></item></list>
            </exception>
        </member>
        <member name="M:Capnp.DynamicSerializerState.LinkToCapability(System.Int32,System.UInt32)">
            <summary>
            Links a sub-item (struct field or list element) of this state to a capability.
            </summary>
            <param name="slot">If this state describes a struct: Index into this struct's pointer table. 
            If this state describes a list of pointers: List element index.</param>
            <param name="capabilityIndex">capability index inside the capability table</param>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>This state does neither describe a struct, nor a list of pointers</description></item>
            <item><description>Another state is already linked to the specified position (sorry, no overwrite allowed)</description></item></list>
            </exception>
        </member>
        <member name="M:Capnp.DynamicSerializerState.SetStruct(System.UInt16,System.UInt16)">
            <summary>
            Determines the underlying object to be a struct.
            </summary>
            <param name="dataCount">Desired size of the struct's data section, in words</param>
            <param name="ptrCount">Desired size of the struct's pointer section, in words</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
        </member>
        <member name="M:Capnp.DynamicSerializerState.SetListOfValues(System.Byte,System.Int32)">
            <summary>
            Determines the underlying object to be a list of (primitive) values.
            </summary>
            <param name="bitsPerElement">Element size in bits, must be 0 (void), 1 (bool), 8, 16, 32, or 64</param>
            <param name="totalCount">Desired element count</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bitsPerElement"/> outside allowed range, 
            <paramref name="totalCount"/> negative or exceeding 2^29-1</exception>
        </member>
        <member name="M:Capnp.DynamicSerializerState.SetListOfPointers(System.Int32)">
            <summary>
            Determines the underlying object to be a list of pointers.
            </summary>
            <param name="totalCount">Desired element count</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalCount"/> negative or exceeding 2^29-1</exception>
        </member>
        <member name="M:Capnp.DynamicSerializerState.SetListOfStructs(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Determines the underlying object to be a list of structs (fixed-width compound list).
            </summary>
            <param name="totalCount">Desired element count</param>
            <param name="dataCount">Desired size of each struct's data section, in words</param>
            <param name="ptrCount">Desired size of each struct's pointer section, in words</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalCount"/> negative, or total word count would exceed 2^29-1</exception>
        </member>
        <member name="M:Capnp.DynamicSerializerState.SetObject(System.Object)">
            <summary>
            Constructs the underlying object from the given representation.
            </summary>
            <param name="obj">Object representation. Must be one of the following:
            <list type="bullet">
            <item><description>An instance implementing <see cref="T:Capnp.ICapnpSerializable"/></description></item>
            <item><description>null</description></item>
            <item><description>A <see cref="T:System.String"/></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<byte>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<sbyte>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<ushort>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<short>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<int>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<uint>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<long>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<ulong>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<float>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<double>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<bool>]]></code></description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<string>]]></code></description></item>
            <item><description>Another <see cref="T:Capnp.DeserializerState"/></description></item>
            <item><description>Another <see cref="T:Capnp.SerializerState"/></description></item>
            <item><description>Low-level capability object (<see cref="T:Capnp.Rpc.ConsumedCapability"/>)</description></item>
            <item><description>Proxy object (<see cref="T:Capnp.Rpc.Proxy"/>)</description></item>
            <item><description>Skeleton object (<see cref="T:Capnp.Rpc.Skeleton"/>)</description></item>
            <item><description>Capability interface implementation</description></item>
            <item><description>A <code><![CDATA[IReadOnlyList<object>]]></code> whereby each list item is one of the things listed here.</description></item>
            </list>
            </param>
        </member>
        <member name="T:Capnp.EmptyList`1">
            <summary>
            Implements an empty <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Capnp.EmptyList`1.Item(System.Int32)">
            <summary>
            Always throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="index">Ignored</param>
        </member>
        <member name="P:Capnp.EmptyList`1.Count">
            <summary>
            Always 0.
            </summary>
        </member>
        <member name="M:Capnp.EmptyList`1.GetEnumerator">
            <summary>
            Returns an empty enumerator.
            </summary>
        </member>
        <member name="T:Capnp.EmptyListDeserializer">
            <summary>
            ListDeserializer specialization for empty lists.
            </summary>
        </member>
        <member name="P:Capnp.EmptyListDeserializer.Kind">
            <summary>
            Always ListKind.ListOfEmpty (despite the fact the empty list != List(Void)
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Returns am empty <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
            <typeparam name="T">Element ype</typeparam>
            <param name="cons">Ignored</param>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastBool">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<bool>]]></code>/>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastByte">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<byte>]]></code>/>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastDouble">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<double>]]></code>/>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastFloat">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<float>]]></code>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastInt">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<int>]]></code>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastList">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<ListDeserializer>]]></code>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastLong">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<long>]]></code>/>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastSByte">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<sbyte>]]></code>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastShort">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<short>]]></code>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastText">
            <summary>
            Returns an empty string.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastUInt">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<uint>]]></code>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastULong">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<ulong>]]></code>.
            </summary>
        </member>
        <member name="M:Capnp.EmptyListDeserializer.CastUShort">
            <summary>
            Returns an empty <code><![CDATA[IReadOnlyList<ushort>]]></code>.
            </summary>
        </member>
        <member name="T:Capnp.FramePump">
            <summary>
            The FramePump handles sending and receiving Cap'n Proto messages over a stream. It exposes a Send method for writing frames to the stream, and an
            event handler for processing received frames. It does not fork any new thread by itself, but instead exposes a synchronous blocking Run method that
            implements the receive loop. Invoke this method in the thread context of your choice.
            </summary>
        </member>
        <member name="M:Capnp.FramePump.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new instance for given stream.
            </summary>
            <param name="stream">The stream for message I/O. 
            If you intend to receive messages, the stream must support reading (CanRead).
            If you intend to send messages, the stream must support writing (CanWrite).
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:Capnp.FramePump.Dispose">
            <summary>
            Disposes this instance and the underlying stream. This will also cause the Run method to return.
            </summary>
        </member>
        <member name="E:Capnp.FramePump.FrameReceived">
            <summary>
            Event handler for frame reception.
            </summary>
        </member>
        <member name="M:Capnp.FramePump.Send(Capnp.WireFrame)">
            <summary>
            Sends a message over the stream.
            </summary>
            <param name="frame">Message to be sent</param>
            <exception cref="T:System.InvalidOperationException">The underlying stream does not support writing.</exception>
            <exception cref="T:System.ArgumentException">The message does not provide at least one segment, or one of its segments is empty.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">This instance or stream is diposed.</exception>
        </member>
        <member name="P:Capnp.FramePump.IsWaitingForData">
            <summary>
            Whether the pump is currently waiting for data to receive.
            </summary>
        </member>
        <member name="M:Capnp.FramePump.Run">
            <summary>
            Synchronously runs the frame reception loop. Will only return after calling Dispose() or upon error condition.
            The method does not propagate EndOfStreamException or ObjectDisposedException to the caller, since these conditions are considered 
            to be part of normal operation. It does pass exceptions which arise due to I/O errors or invalid data.
            </summary>
            <exception cref="T:System.ArgumentException">The underlying stream does not support reading or is already closed.</exception>
            <exception cref="T:System.IO.InvalidDataException">Encountered Invalid Framing Data</exception>
            <exception cref="T:System.OutOfMemoryException">Received a message with too many or too big segments, probably dues to invalid data.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Capnp.FramePump.AttachTracer(Capnp.FrameTracing.IFrameTracer)">
            <summary>
            Attaches an observer for tracing RPC traffic
            </summary>
            <param name="tracer">observer implementation</param>
        </member>
        <member name="T:Capnp.FrameTracing.FrameDirection">
            <summary>
            Send or receive
            </summary>
        </member>
        <member name="F:Capnp.FrameTracing.FrameDirection.Rx">
            <summary>
            Receive direction
            </summary>
        </member>
        <member name="F:Capnp.FrameTracing.FrameDirection.Tx">
            <summary>
            Send direction
            </summary>
        </member>
        <member name="T:Capnp.FrameTracing.IFrameTracer">
            <summary>
            Client interface for observing RPC traffic
            </summary>
        </member>
        <member name="M:Capnp.FrameTracing.IFrameTracer.TraceFrame(Capnp.FrameTracing.FrameDirection,Capnp.WireFrame)">
            <summary>
            Called whenever an RPC frame was sent or received
            </summary>
            <param name="direction">frame direction</param>
            <param name="frame">actual frame</param>
        </member>
        <member name="T:Capnp.FrameTracing.RpcFrameTracer">
            <summary>
            Default implementation of an RPC observer
            </summary>
        </member>
        <member name="M:Capnp.FrameTracing.RpcFrameTracer.#ctor(System.IO.TextWriter)">
            <summary>
            Constructs an instance
            </summary>
            <param name="traceWriter">textual logging target</param>
        </member>
        <member name="M:Capnp.FrameTracing.RpcFrameTracer.Dispose">
            <summary>
            Dispose pattern implementation
            </summary>
        </member>
        <member name="M:Capnp.FrameTracing.RpcFrameTracer.TraceFrame(Capnp.FrameTracing.FrameDirection,Capnp.WireFrame)">
            <summary>
            Processes a sent or received RPC frame
            </summary>
            <param name="dir">frame direction</param>
            <param name="frame">actual frame</param>
        </member>
        <member name="T:Capnp.Framing">
            <summary>
            Supports the deserialization of Cap'n Proto messages from a stream (see https://capnproto.org/encoding.html#serialization-over-a-stream).
            Packing and compression cannot be handled yet.
            </summary>
        </member>
        <member name="M:Capnp.Framing.ReadSegments(System.IO.Stream)">
            <summary>
            Deserializes a message from given stream.
            </summary>
            <param name="stream">The stream to read from</param>
            <returns>The deserialized message</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The stream does not support reading, is null, or is already closed.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
            <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.IO.InvalidDataException">Encountered invalid framing data, too many or too large segments</exception>
            <exception cref="T:System.OutOfMemoryException">Too many or too large segments, probably due to invalid framing data.</exception>
        </member>
        <member name="M:Capnp.Framing.ReadWireFrame(System.IO.BinaryReader)">
            <summary>
            Deserializes the next Cap'n Proto message from given stream.
            </summary>
            <param name="reader">The stream to read from</param>
            <returns>The message</returns>
        </member>
        <member name="T:Capnp.ICapnpSerializable">
            <summary>
            This interface is intended to be implemented by schema-generated domain classes which support deserialization from
            a <see cref="T:Capnp.DeserializerState"/> and serialization to a <see cref="T:Capnp.SerializerState"/>.
            </summary>
        </member>
        <member name="M:Capnp.ICapnpSerializable.Serialize(Capnp.SerializerState)">
            <summary>
            Serializes the implementation's current state to a serializer state.
            </summary>
            <param name="state">Target serializer state</param>
        </member>
        <member name="M:Capnp.ICapnpSerializable.Deserialize(Capnp.DeserializerState)">
            <summary>
            Deserializes the implementation's state from a deserializer state.
            </summary>
            <param name="state">Source deserializer state</param>
        </member>
        <member name="T:Capnp.ISegmentAllocator">
            <summary>
            Implements a segment allocation policy for Cap'n Proto building messages.
            </summary>
        </member>
        <member name="P:Capnp.ISegmentAllocator.Segments">
            <summary>
            Currently allocated segments.
            </summary>
        </member>
        <member name="M:Capnp.ISegmentAllocator.Allocate(System.UInt32,System.UInt32,Capnp.SegmentSlice@,System.Boolean)">
            <summary>
            Attempts to allocate a memory block. The first allocation attempt is made inside the segment specified by <paramref name="preferredSegment"/>.
            If that segment does not provide enough space or does not exist, further actions depend on the <paramref name="forcePreferredSegment"/> flag.
            If that flag is true, allocation will fail (return false). Otherwise, the allocation shall scan existing segments for the requested amount of space,
            and create a new segment if none provides enough space.
            </summary>
            <param name="nwords">Number of words to allocate</param>
            <param name="preferredSegment">Index of preferred segment wherein the block should be allocated</param>
            <param name="slice">Position of allocated memory block (undefined in case of failure)</param>
            <param name="forcePreferredSegment">Whether the segment specified by <paramref name="preferredSegment"/> is mandatory</param>
            <returns>Whether allocation was successful</returns>
        </member>
        <member name="T:Capnp.IStructDeserializer">
            <summary>
            An implementations of this interface represents a struct which is being deserialized from a Cap'n Proto object.
            </summary>
        </member>
        <member name="M:Capnp.IStructDeserializer.StructReadData(System.UInt64,System.Int32)">
            <summary>
            Reads a slice of up to 64 bits from this struct's data section, starting from the specified bit offset.
            The slice must be aligned within a 64 bit word boundary.
            </summary>
            <param name="bitOffset">Start bit offset relative to the data section, little endian</param>
            <param name="bitCount">numbers of bits to read</param>
            <returns>the data</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">non-aligned access</exception>
            <exception cref="T:System.IndexOutOfRangeException">bitOffset exceeds the data section</exception>
            <exception cref="T:Capnp.DeserializationException">this state does not represent a struct</exception>
        </member>
        <member name="T:Capnp.IStructSerializer">
            <summary>
            An implementations of this interface represents a struct which is being serialized as Cap'n Proto object.
            </summary>
        </member>
        <member name="M:Capnp.IStructSerializer.StructWriteData(System.UInt64,System.Int32,System.UInt64)">
            <summary>
            Writes data (up to 64 bits) into the underlying struct's data section. 
            The write operation must be aligned to fit within a single word.
            </summary>
            <param name="bitOffset">Start bit relative to the struct's data section, little endian</param>
            <param name="bitCount">Number of bits to write</param>
            <param name="data">Data bits to write</param>
            <exception cref="T:System.InvalidOperationException">The object was not determined to be a struct</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The data slice specified by <paramref name="bitOffset"/> and <paramref name="bitCount"/>
            is not completely within the struct's data section, misaligned, exceeds one word, or <paramref name="bitCount"/> is negative</exception>
        </member>
        <member name="P:Capnp.IStructSerializer.StructDataSection">
            <summary>
            The struct's data section as memory span.
            </summary>
        </member>
        <member name="T:Capnp.ListDeserializer">
            <summary>
            Base class for interpreting a <see cref="T:Capnp.DeserializerState"/> as List(T).
            </summary>
        </member>
        <member name="F:Capnp.ListDeserializer.State">
            <summary>
            Underlying deserializer state
            </summary>
        </member>
        <member name="P:Capnp.ListDeserializer.Count">
            <summary>
            This list's element count
            </summary>
        </member>
        <member name="P:Capnp.ListDeserializer.Kind">
            <summary>
            The list's element category
            </summary>
        </member>
        <member name="M:Capnp.ListDeserializer.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Represents this list by applying a selector function to each element's deserializer state.
            This operator is only supported by certain specializations.
            </summary>
            <typeparam name="T">Target element type</typeparam>
            <param name="cons">Selector function</param>
            <returns>The desired representation</returns>
        </member>
        <member name="M:Capnp.ListDeserializer.CastList">
            <summary>
            Represents this list as a list of lists.
            </summary>
            <returns>The list of lists representation, each element being a <see cref="T:Capnp.ListDeserializer"/> on its own.</returns>
            <exception cref="T:System.NotSupportedException">If this kind of list cannot be represented as list of lists (because it is a list of non-pointers)</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastCapList``1">
            <summary>
            Represents this list as a list of capabilities.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
            <returns>Capability list representation</returns>
            <exception cref="T:System.NotSupportedException">If this kind of list cannot be represented as list of capabilities (because it is a list of non-pointers)</exception>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException">If <typeparamref name="T"/> does not qualify as capability interface.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastND``1(System.Int32)">
            <summary>
            Represents this list as n-dimensional list of T, with T being a primitive type.
            </summary>
            <typeparam name="T">Element type, must be primitive</typeparam>
            <param name="n">Number of dimensions</param>
            <returns>The desired representation as <![CDATA[IReadOnlyList<...IReadOnlyList<T>>]]></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is less than or equal to 0</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastND``1(System.Int32,System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Represents this list as n-dimensional list of T, with T being any type.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="n">Number of dimensions</param>
            <param name="cons">Selector function which constructs an instance of <typeparamref name="T"/> from a <see cref="T:Capnp.DeserializerState"/></param>
            <returns>The desired representation as <![CDATA[IReadOnlyList<...IReadOnlyList<T>>]]></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cons"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is less than or equals 0.</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastEnumsND``1(System.Int32,System.Func{System.UInt16,``0})">
            <summary>
            Represents this list as n-dimensional list of enums.
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="n">Number of dimensions</param>
            <param name="cons">Cast function which converts ushort value to enum value</param>
            <returns>The desired representation as <![CDATA[IReadOnlyList<...IReadOnlyList<T>>]]></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cons"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is less than or equals 0.</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastVoidND(System.Int32)">
            <summary>
            Represents this list as n-dimensional List(...List(Void))
            </summary>
            <param name="n">Number of dimensions</param>
            <returns>The desired representation as <![CDATA[IReadOnlyList<...IReadOnlyList<T>>]]></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is less than or equals 0</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.Cast2D``1">
            <summary>
            Represents this list as "matrix" (jagged array) with primitive element type.
            </summary>
            <typeparam name="T">Element type, must be primitive</typeparam>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastData">
            <summary>
            Represents this list as List(Data).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.Cast2D``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Represents this list as "matrix" (jagged array) with complex element type.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="cons">Selector function which constructs an instance of <typeparamref name="T"/> from a <see cref="T:Capnp.DeserializerState"/></param>
            <returns>The desired representation</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cons"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastEnums2D``1(System.Func{System.UInt16,``0})">
            <summary>
            Represents this list as "matrix" (jagged array) of enum-typed elements.
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="cons">Cast function which converts ushort value to enum value</param>
            <returns>The desired representation</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cons"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.Cast3D``1">
            <summary>
            Represents this list as 3-dimensional jagged array with primitive element type.
            </summary>
            <typeparam name="T">Element type, must be primitive</typeparam>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.Cast3D``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Represents this list as 3-dimensional jagged array with complex element type.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="cons">Selector function which constructs an instance of <typeparamref name="T"/> from a <see cref="T:Capnp.DeserializerState"/></param>
            <returns>The desired representation</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cons"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastEnums3D``1(System.Func{System.UInt16,``0})">
            <summary>
            Represents this list as 3-dimensional jagged array of enum-typed elements.
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="cons">Cast function which converts ushort value to enum value</param>
            <returns>The desired representation</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cons"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastEnums``1(System.Func{System.UInt16,``0})">
            <summary>
            Represents this list as list of enum-typed elements.
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="cons">Cast function which converts ushort value to enum value</param>
            <returns>The desired representation</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cons"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastVoid">
            <summary>
            Represents this list as List(Void), which boils down to returning the number of elements.
            </summary>
            <returns>The List(Void) representation which is nothing but the list's element count.</returns>
        </member>
        <member name="M:Capnp.ListDeserializer.CastVoid2D">
            <summary>
            Represents this list as List(List(Void)), which boils down to returning a list of element counts.
            </summary>
            <returns>A list of integers whereby each number equals the sublist's element count.</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastVoid3D">
            <summary>
            Represents this list as List(List(List(Void))).
            </summary>
            <returns>The List(List(List(Void))) representation which is in turn a 2-dimensional jagged array of element counts.</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastText2">
            <summary>
            Represents this list as List(Text). For representing it as Text, use <seealso cref="M:Capnp.ListDeserializer.CastText"/>.
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastText">
            <summary>
            Represents this list as Text. For representing it as List(Text), use <seealso cref="M:Capnp.ListDeserializer.CastText2"/>.
            </summary>
            <remarks>
            Did you notice that the naming pattern is broken here? For every other CastX method, X depicts the element type. 
            CastX actually means "represent this list as list of X". Logically, the semantics of CastText should be the semantics
            implemented by CastText2. And this method's name should be "CastChar". This wouldn't be accurate either, since a string
            is semantically more than the list of its characters. Trying to figure out a consistent naming pattern, we'd probably
            end up in less concise method names (do you have a good suggestion?). Considering this and the fact that you probably
            won't use these methods directly (because the code generator will produce nice wrappers for you) it seems acceptable to
            live with the asymmetric and somewhat ugly naming.
            </remarks>
            <returns>The decoded text</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastBool">
            <summary>
            Represents this list as List(Bool).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastSByte">
            <summary>
            Represents this list as List(Int8).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastByte">
            <summary>
            Represents this list as List(UInt8).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastShort">
            <summary>
            Represents this list as List(Int16).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastUShort">
            <summary>
            Represents this list as List(UInt16).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastInt">
            <summary>
            Represents this list as List(Int32).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastUInt">
            <summary>
            Represents this list as List(UInt32).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastLong">
            <summary>
            Represents this list as List(Int64).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastULong">
            <summary>
            Represents this list as List(UInt64).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastFloat">
            <summary>
            Represents this list as List(Float32).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="M:Capnp.ListDeserializer.CastDouble">
            <summary>
            Represents this list as List(Float64).
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">If this list cannot be represented in the desired manner.</exception>
        </member>
        <member name="T:Capnp.ListKind">
            <summary>
            Enumerates the list element categories which are defined by Cap'n Proto.
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfEmpty">
            <summary>
            List(Void)
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfBits">
            <summary>
            List(Bool)
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfBytes">
            <summary>
            List(Int8) or List(UInt8)
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfShorts">
            <summary>
            List(Int16), List(UInt16), or List(Enum)
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfInts">
            <summary>
            List(Int32), List(UInt32), or List(Float32)
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfLongs">
            <summary>
            List(Int64), List(UInt64), or List(Float64)
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfPointers">
            <summary>
            A list of pointers
            </summary>
        </member>
        <member name="F:Capnp.ListKind.ListOfStructs">
            <summary>
            A list of fixed-size composites (i.e. structs)
            </summary>
        </member>
        <member name="T:Capnp.ListOfBitsDeserializer">
            <summary>
            ListDeserializer specialization for a List(Bool).
            </summary>
        </member>
        <member name="P:Capnp.ListOfBitsDeserializer.Kind">
            <summary>
            Always ListKind.ListOfBits
            </summary>
        </member>
        <member name="P:Capnp.ListOfBitsDeserializer.Item(System.Int32)">
            <summary>
            Gets the element at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>Element value</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Capnp.ListOfBitsDeserializer.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capnp.ListOfBitsDeserializer.CastBool">
            <summary>
            Return this
            </summary>
        </member>
        <member name="M:Capnp.ListOfBitsDeserializer.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Always throws <see cref="T:System.NotSupportedException"/> since it is not intended to represent a list of bits differently.
            </summary>
        </member>
        <member name="T:Capnp.ListOfBitsSerializer">
            <summary>
            SerializerState specialization for a List(Bool).
            </summary>
        </member>
        <member name="P:Capnp.ListOfBitsSerializer.Item(System.Int32)">
            <summary>
            Gets or sets the element at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>Element value</returns>
            <exception cref="T:System.InvalidOperationException">List was not initialized, or attempting to overwrite a non-null element.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:Capnp.ListOfBitsSerializer.Count">
            <summary>
            This list's element count.
            </summary>
        </member>
        <member name="M:Capnp.ListOfBitsSerializer.Init(System.Int32)">
            <summary>
            Initializes this list with a specific size. The list can be initialized only once.
            </summary>
            <param name="count">List element count</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than 2^29-1</exception>
        </member>
        <member name="M:Capnp.ListOfBitsSerializer.Init(System.Collections.Generic.IReadOnlyList{System.Boolean})">
            <summary>
            Initializes the list with given content.
            </summary>
            <param name="items">List content. Can be null in which case the list is simply not initialized.</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">More than 2^29-1 items.</exception>
        </member>
        <member name="M:Capnp.ListOfBitsSerializer.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="T:Capnp.ListOfCapsDeserializer`1">
            <summary>
            ListDeserializer specialization for a list of capabilities.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
        </member>
        <member name="P:Capnp.ListOfCapsDeserializer`1.Item(System.Int32)">
            <summary>
            Returns the capability at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>The capability at given index (in terms of its proxy instance)</returns>
        </member>
        <member name="P:Capnp.ListOfCapsDeserializer`1.Kind">
            <summary>
            Always ListKind.ListOfPointers
            </summary>
        </member>
        <member name="M:Capnp.ListOfCapsDeserializer`1.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Always throws <see cref="T:System.NotSupportedException"/>, since it is not intended to convert a capability list to anything else.
            </summary>
        </member>
        <member name="M:Capnp.ListOfCapsDeserializer`1.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Capnp.ListOfCapsSerializer`1">
            <summary>
            SerializerState specialization for a list of capabilities.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
        </member>
        <member name="M:Capnp.ListOfCapsSerializer`1.#ctor">
            <summary>
            Constructs an instance.
            </summary>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException"><typeparamref name="T"/> does not quality as capability interface.
            The implementation might attempt to throw this exception earlier in the static constructor (during type load). Currently it doesn't
            because there is a significant risk of messing something up and ending with a hard-to-debug <see cref="T:System.TypeLoadException"/>.</exception>
        </member>
        <member name="P:Capnp.ListOfCapsSerializer`1.Item(System.Int32)">
            <summary>
            Gets or sets the capability at given element index.
            </summary>
            <param name="index">Element index</param>
            <returns>Proxy object of capability at given element index</returns>
            <exception cref="T:System.InvalidOperationException">List was not initialized, or attempting to overwrite an already set element.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Capnp.ListOfCapsSerializer`1.Init(System.Int32)">
            <summary>
            Initializes this list with a specific size. The list can be initialized only once.
            </summary>
            <param name="count">List element count</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than 2^29-1</exception>
        </member>
        <member name="M:Capnp.ListOfCapsSerializer`1.Init(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes the list with given content.
            </summary>
            <param name="caps">List content. Can be null in which case the list is simply not initialized.</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">More than 2^29-1 items.</exception>
        </member>
        <member name="P:Capnp.ListOfCapsSerializer`1.Count">
            <summary>
            This list's element count.
            </summary>
        </member>
        <member name="M:Capnp.ListOfCapsSerializer`1.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Capnp.ListOfEmptyDeserializer">
            <summary>
            ListDeserializer specialization for List(Void).
            </summary>
        </member>
        <member name="P:Capnp.ListOfEmptyDeserializer.Item(System.Int32)">
            <summary>
            Returns a DeserializerState representing an element at given index.
            This is always the null object, since Void cannot carry any data.
            </summary>
            <param name="index">Element index</param>
            <returns><code>default(DeserializerState)</code></returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:Capnp.ListOfEmptyDeserializer.Kind">
            <summary>
            Always ListKind.ListOfEmpty
            </summary>
        </member>
        <member name="M:Capnp.ListOfEmptyDeserializer.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Applies a selector function to each element. 
            Trivia: Since each element is the null object, the selector function always gets fed with a null object.
            </summary>
            <typeparam name="T">Element target type</typeparam>
            <param name="cons">Selector function</param>
            <returns>The desired representation</returns>
        </member>
        <member name="M:Capnp.ListOfEmptyDeserializer.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:Capnp.ListOfEmptySerializer">
            <summary>
            SerializerState specialization for List(Void).
            </summary>
        </member>
        <member name="P:Capnp.ListOfEmptySerializer.Count">
            <summary>
            This list's element count.
            </summary>
        </member>
        <member name="M:Capnp.ListOfEmptySerializer.Init(System.Int32)">
            <summary>
            Initializes this list with a specific size. The list can be initialized only once.
            </summary>
            <param name="count">List element count</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than 2^29-1</exception>
        </member>
        <member name="T:Capnp.ListOfPointersDeserializer">
            <summary>
            ListDeserializer specialization for List(T) when T is unknown (generic), List(Data), List(Text), and List(List(...)).
            </summary>
        </member>
        <member name="P:Capnp.ListOfPointersDeserializer.Kind">
            <summary>
            Always <code>ListKind.ListOfPointers</code>
            </summary>
        </member>
        <member name="P:Capnp.ListOfPointersDeserializer.Item(System.Int32)">
            <summary>
            Gets the DeserializerState representing the element at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>DeserializerState representing the element at given index</returns>
        </member>
        <member name="M:Capnp.ListOfPointersDeserializer.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Capnp.ListOfPointersDeserializer.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Applies a selector function to each element.
            </summary>
            <typeparam name="T">Element target type</typeparam>
            <param name="cons">Selector function</param>
            <returns>The desired representation</returns>
        </member>
        <member name="M:Capnp.ListOfPointersDeserializer.CastList">
            <summary>
            Interprets this instance as List(List(...)).
            </summary>
            <returns>The desired representation. Since it is evaluated lazily, type conflicts will not happen before accessing the resulting list's elements.</returns>
        </member>
        <member name="M:Capnp.ListOfPointersDeserializer.CastCapList``1">
            <summary>
            Interprets this instance as a list of capabilities.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
            <returns>The desired representation. Since it is evaluated lazily, type conflicts will not happen before accessing the resulting list's elements.</returns>
        </member>
        <member name="T:Capnp.ListOfPointersSerializer`1">
            <summary>
            SerializerState specialization for List(T) when T is unknown (generic), List(Data), List(Text), and List(List(...)).
            </summary>
            <typeparam name="TS">SerializerState which represents the element type</typeparam>
        </member>
        <member name="P:Capnp.ListOfPointersSerializer`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>Serializer state representing the desired element</returns>
            <exception cref="T:System.InvalidOperationException">List was not initialized, or attempting to overwrite a non-null element.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="P:Capnp.ListOfPointersSerializer`1.Count">
            <summary>
            This list's element count.
            </summary>
        </member>
        <member name="M:Capnp.ListOfPointersSerializer`1.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Capnp.ListOfPointersSerializer`1.Init(System.Int32)">
            <summary>
            Initializes this list with a specific size. The list can be initialized only once.
            </summary>
            <param name="count">List element count</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than 2^29-1</exception>
        </member>
        <member name="M:Capnp.ListOfPointersSerializer`1.Init``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{`0,``0})">
            <summary>
            Initializes the list with given content.
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="items">List content. Can be null in which case the list is simply not initialized.</param>
            <param name="init">Serialization action to transfer a particular item into the serializer state.</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">More than 2^29-1 items.</exception>
        </member>
        <member name="T:Capnp.ListOfPrimitivesDeserializer`1">
            <summary>
            ListDeserializer specialization for List(Int*), List(UInt*), List(Float*), and List(Enum).
            </summary>
            <typeparam name="T">List element type</typeparam>
        </member>
        <member name="P:Capnp.ListOfPrimitivesDeserializer`1.Kind">
            <summary>
            One of ListOfBytes, ListOfShorts, ListOfInts, ListOfLongs.
            </summary>
        </member>
        <member name="P:Capnp.ListOfPrimitivesDeserializer`1.Item(System.Int32)">
            <summary>
            Returns the element at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>Element value</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastBool">
            <summary>
            Always throws <see cref="T:System.NotSupportedException"/> because this specialization can never represent a List(bool).
            </summary>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastByte">
            <summary>
            Attempts to interpret this instance as List(UInt8). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 1 byte.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastSByte">
            <summary>
            Attempts to interpret this instance as List(Int8). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 1 byte.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastUShort">
            <summary>
            Attempts to interpret this instance as List(UInt16). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 2 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastShort">
            <summary>
            Attempts to interpret this instance as List(Int16). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 2 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastUInt">
            <summary>
            Attempts to interpret this instance as List(UInt32). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 4 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastInt">
            <summary>
            Attempts to interpret this instance as List(Int32). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 4 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastULong">
            <summary>
            Attempts to interpret this instance as List(UInt64). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 8 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastLong">
            <summary>
            Attempts to interpret this instance as List(Int64). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 8 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastFloat">
            <summary>
            Attempts to interpret this instance as List(Float32). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 4 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastDouble">
            <summary>
            Attempts to interpret this instance as List(Float64). 
            </summary>
            <returns>The desired representation</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 8 bytes.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Attempts to interpret this instance as List(U) whereby U is a struct, applying a selector function to each element.
            </summary>
            <param name="cons">Selector function</param>
            <returns>The desired representation</returns>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.CastText">
            <summary>
            Attempts to interpret this instance as Text and returns the string representation.
            </summary>
            <returns>The decoded string</returns>
            <exception cref="T:System.NotSupportedException">Element size is different from 1 byte.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesDeserializer`1.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Capnp.ListOfPrimitivesSerializer`1">
            <summary>
            SerializerState specialization for List(Int*), List(UInt*), List(Float*), and List(Enum).
            </summary>
            <typeparam name="T">List element type, must be primitive. Static constructor will throw if the type does not work.</typeparam>
        </member>
        <member name="P:Capnp.ListOfPrimitivesSerializer`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>Element value</returns>
        </member>
        <member name="P:Capnp.ListOfPrimitivesSerializer`1.Count">
            <summary>
            This list's element count.
            </summary>
        </member>
        <member name="M:Capnp.ListOfPrimitivesSerializer`1.Init(System.Int32)">
            <summary>
            Initializes this list with a specific size. The list can be initialized only once.
            </summary>
            <param name="count">List element count</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than 2^29-1</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesSerializer`1.Init(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Initializes the list with given content.
            </summary>
            <param name="items">List content. Can be null in which case the list is simply not initialized.</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">More than 2^29-1 items.</exception>
        </member>
        <member name="M:Capnp.ListOfPrimitivesSerializer`1.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Capnp.ListOfStructsDeserializer">
            <summary>
            ListDeserializer specialization for List(T) when T is a known struct (i.e. a list of fixed-width composites).
            </summary>
        </member>
        <member name="P:Capnp.ListOfStructsDeserializer.Kind">
            <summary>
            Always returns <code>ListKind.ListOfStructs</code>.
            </summary>
        </member>
        <member name="P:Capnp.ListOfStructsDeserializer.Item(System.Int32)">
            <summary>
            Returns the deserializer state at given index.
            </summary>
            <param name="index">Element index</param>
            <returns>Element deserializer state</returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:Capnp.DeserializationException">Traversal limit reached</exception>
        </member>
        <member name="M:Capnp.ListOfStructsDeserializer.Cast``1(System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Converts this list to a different representation by applying an element selector function.
            </summary>
            <typeparam name="T">Target type after applying the selector function</typeparam>
            <param name="cons">The selector function</param>
            <returns>The new list representation</returns>
        </member>
        <member name="M:Capnp.ListOfStructsDeserializer.GetEnumerator">
            <summary>
            Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:Capnp.ListOfStructsSerializer`1">
            <summary>
            SerializerState specialization for List(T) when T is a known struct (i.e. a list of fixed-width composites).
            </summary>
            <typeparam name="TS">SerializerState which represents the struct type</typeparam>
        </member>
        <member name="P:Capnp.ListOfStructsSerializer`1.Item(System.Int32)">
            <summary>
            Returns the struct serializer a given index.
            </summary>
            <param name="index">Element index</param>
            <returns>The struct serializer</returns>
        </member>
        <member name="P:Capnp.ListOfStructsSerializer`1.Count">
            <summary>
            This list's element count.
            </summary>
        </member>
        <member name="M:Capnp.ListOfStructsSerializer`1.GetEnumerator">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Capnp.ListOfStructsSerializer`1.Init(System.Int32)">
            <summary>
            Initializes this list with a specific size. The list can be initialized only once.
            </summary>
            <param name="count">List element count</param>
        </member>
        <member name="M:Capnp.ListOfStructsSerializer`1.Init``1(System.Collections.Generic.IReadOnlyList{``0},System.Action{`0,``0})">
            <summary>
            Initializes the list with given content.
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="items">List content. Can be null in which case the list is simply not initialized.</param>
            <param name="init">Serialization action to transfer a particular item into the serializer state.</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">More than 2^29-1 items.</exception>
        </member>
        <member name="T:Capnp.ListOfTextSerializer">
            <summary>
            SerializerState specialization for List(Text)
            </summary>
        </member>
        <member name="P:Capnp.ListOfTextSerializer.Item(System.Int32)">
            <summary>
            Gets or sets the text at given index. Once an element is set, it cannot be overwritten.
            </summary>
            <param name="index">Element index</param>
            <exception cref="T:System.InvalidOperationException">List is not initialized</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">UTF-8 encoding exceeds 2^29-2 bytes</exception>
        </member>
        <member name="P:Capnp.ListOfTextSerializer.Count">
            <summary>
            This list's element count.
            </summary>
        </member>
        <member name="M:Capnp.ListOfTextSerializer.GetEnumerator">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IEnumerable`1"/>/>
            </summary>
        </member>
        <member name="M:Capnp.ListOfTextSerializer.Init(System.Int32)">
            <summary>
            Initializes this list with a specific size. The list can be initialized only once.
            </summary>
            <param name="count">List element count</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than 2^29-1</exception>
        </member>
        <member name="M:Capnp.ListOfTextSerializer.Init(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes the list with given content.
            </summary>
            <param name="items">List content. Can be null in which case the list is simply not initialized.</param>
            <exception cref="T:System.InvalidOperationException">The list was already initialized</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">More than 2^29-1 items, or the UTF-8 encoding of an individual string requires more than 2^29-2 bytes.</exception>
        </member>
        <member name="T:Capnp.MessageBuilder">
            <summary>
            Entry point for building Cap'n Proto messages.
            </summary>
        </member>
        <member name="M:Capnp.MessageBuilder.Create``1">
            <summary>
            Constructs an instance using a custom segment allocator and reserves space for the root pointer.
            </summary>
            <typeparam name="T">Segment allocator implementation type</typeparam>
        </member>
        <member name="M:Capnp.MessageBuilder.Create(System.Int32)">
            <summary>
            Constructs an instance using the default segment allocator and reserves space for the root pointer.
            </summary>
            <param name="defaultSegmentSize">Default segment size, <see cref="T:Capnp.SegmentAllocator"/></param>
        </member>
        <member name="M:Capnp.MessageBuilder.CreateObject``1">
            <summary>
            Creates a new object inside the message.
            </summary>
            <typeparam name="TS">Serializer state specialization</typeparam>
            <returns>Serializer state instance representing the new object</returns>
        </member>
        <member name="P:Capnp.MessageBuilder.Root">
            <summary>
            Gets or sets the root object. The root object must be set exactly once per message.
            Setting it manually is only required (and allowed) when it was created with <see cref="M:Capnp.MessageBuilder.CreateObject``1"/>.
            </summary>
        </member>
        <member name="M:Capnp.MessageBuilder.BuildRoot``1">
            <summary>
            Creates an object and sets it as root object.
            </summary>
            <typeparam name="TS">Serializer state specialization</typeparam>
            <returns>Serializer state instance representing the new object</returns>
        </member>
        <member name="P:Capnp.MessageBuilder.Frame">
            <summary>
            Returns the wire representation of the built message.
            </summary>
        </member>
        <member name="M:Capnp.MessageBuilder.InitCapTable">
            <summary>
            Initializes the capability table for using the message builder in RPC context.
            </summary>
        </member>
        <member name="P:Capnp.MessageBuilder.Allocator">
            <summary>
            Returns this message builder's segment allocator.
            </summary>
        </member>
        <member name="T:Capnp.ObjectKind">
            <summary>
            The different kinds of Cap'n Proto objects.
            Despite this is a [Flags] enum, it does not make sense to mutually combine literals.
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.Nil">
            <summary>
            The null object, obtained by decoding a null pointer.
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.Struct">
            <summary>
            A struct
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.Capability">
            <summary>
            A capability
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfEmpty">
            <summary>
            A List(void)
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfBits">
            <summary>
            A list of bits
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfBytes">
            <summary>
            A list of octets
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfShorts">
            <summary>
            A list of 16 bit words
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfInts">
            <summary>
            A list of 32 bit words
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfLongs">
            <summary>
            A list of 64 bits words
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfPointers">
            <summary>
            A list of pointers
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.ListOfStructs">
            <summary>
            A list of fixed-width composites
            </summary>
        </member>
        <member name="F:Capnp.ObjectKind.Value">
            <summary>
            A value. This kind of object does not exist on the wire and is not specified by Capnp.
            It is an internal helper to represent lists of primitive values as lists of structs.
            </summary>
        </member>
        <member name="T:Capnp.ReadOnlyListExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>
            </summary>
        </member>
        <member name="M:Capnp.ReadOnlyListExtensions.LazyListSelect``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1})">
            <summary>
            LINQ-like "Select" operator for <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>, with the addition that the resulting elements are accessible by index.
            The operator implements lazy semantics, which means that the selector function results are not cached./>
            </summary>
            <typeparam name="From">Source element type</typeparam>
            <typeparam name="To">Target element type</typeparam>
            <param name="source">Source list</param>
            <param name="selector">Selector function</param>
            <returns>A read-only list in which each element corresponds to the source element after applying the selector function</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Capnp.ReadOnlyListExtensions.ToReadOnlyList``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1})">
            <summary>
            Applies a selector function to each list element and stores the result in a new list.
            As opposed to <see cref="M:Capnp.ReadOnlyListExtensions.LazyListSelect``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1})"/> the source is evaluated immediately
            and the result is cached.
            </summary>
            <typeparam name="From">Source element type</typeparam>
            <typeparam name="To">Target element type</typeparam>
            <param name="source">Source list</param>
            <param name="selector">Selector function</param>
            <returns>A read-only list in which each element corresponds to the source element after applying the selector function</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="T:Capnp.Reserializing">
            <summary>
            Provides deep-copy functionality to re-serialize an existing deserializer state into another serializer state.
            </summary>
        </member>
        <member name="M:Capnp.Reserializing.DeepCopy(Capnp.DeserializerState,Capnp.SerializerState)">
            <summary>
            Performs a deep copy of an existing deserializer state into another serializer state.
            This implementation does not analyze the source object graph and therefore cannot detect multiple references to the same object.
            Such cases will result in object duplication.
            </summary>
            <param name="from">source state</param>
            <param name="to">target state</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="to"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Target state was already set to a different object type than the source state.</exception>
            <exception cref="T:Capnp.DeserializationException">Security violation due to amplification attack or stack overflow DoS attack, 
            or illegal pointer detected during deserialization.</exception>
        </member>
        <member name="T:Capnp.Rpc.AnswerOrCounterquestion">
            <summary>
            Helper struct to support tail calls
            </summary>
        </member>
        <member name="M:Capnp.Rpc.AnswerOrCounterquestion.op_Implicit(Capnp.SerializerState)~Capnp.Rpc.AnswerOrCounterquestion">
            <summary>
            Wraps a SerializerState
            </summary>
            <param name="answer">object to wrap</param>
        </member>
        <member name="M:Capnp.Rpc.AnswerOrCounterquestion.op_Implicit(Capnp.Rpc.PendingQuestion)~Capnp.Rpc.AnswerOrCounterquestion">
            <summary>
            Wraps a PendingQuestion
            </summary>
            <param name="counterquestion">object to wrap</param>
        </member>
        <member name="P:Capnp.Rpc.AnswerOrCounterquestion.Answer">
            <summary>
            SerializerState, if applicable
            </summary>
        </member>
        <member name="P:Capnp.Rpc.AnswerOrCounterquestion.Counterquestion">
            <summary>
            PendingQuestion, if applicable
            </summary>
        </member>
        <member name="T:Capnp.Rpc.BareProxy">
            <summary>
            Generic Proxy implementation which exposes the (usually protected) Call method.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.BareProxy.FromImpl(System.Object)">
            <summary>
            Wraps a capability implementation in a Proxy.
            </summary>
            <param name="impl">Capability implementation</param>
            <returns>Proxy</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="impl"/> is null.</exception>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException">No <see cref="T:Capnp.Rpc.SkeletonAttribute"/> found on implemented interface(s).</exception>
            <exception cref="T:System.InvalidOperationException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.ArgumentException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Problem with instatiating the Skeleton (constructor threw exception).</exception>
            <exception cref="T:System.MemberAccessException">Caller does not have permission to invoke the Skeleton constructor.</exception>
            <exception cref="T:System.TypeLoadException">Problem with building the Skeleton type, or problem with loading some dependent class.</exception>
        </member>
        <member name="M:Capnp.Rpc.BareProxy.#ctor">
            <summary>
            Constructs an unbound instance.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.BareProxy.#ctor(Capnp.Rpc.ConsumedCapability)">
            <summary>
            Constructs an instance and binds it to the given low-level capability.
            </summary>
            <param name="cap">low-level capability</param>
        </member>
        <member name="M:Capnp.Rpc.BareProxy.Call(System.UInt64,System.UInt16,Capnp.DynamicSerializerState)">
            <summary>
            Requests a method call.
            </summary>
            <param name="interfaceId">Target interface ID</param>
            <param name="methodId">Target method ID</param>
            <param name="args">Method arguments</param>
            <returns>Answer promise</returns>
        </member>
        <member name="T:Capnp.Rpc.CapabilityReflection">
            <summary>
            Provides functionality to construct Proxy and Skeleton instances from capability interfaces and objects implementing capability interfaces.
            A capability interface is any .NET interface which is annotated with <see cref="T:Capnp.Rpc.ProxyAttribute"/> and <see cref="T:Capnp.Rpc.SkeletonAttribute"/>.
            There are some intricacies to consider that you usually don't need to care about, since all that stuff will be generated.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.CapabilityReflection.CreateSkeleton(System.Object)">
            <summary>
            Creates a Skeleton for a given interface implementation.
            </summary>
            <param name="obj">Interface implementation. Must implement at least one interface which is annotated with a <see cref="T:Capnp.Rpc.SkeletonAttribute"/>.</param>
            <returns>The Skeleton</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null.</exception>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException">No <see cref="T:Capnp.Rpc.SkeletonAttribute"/> found on implemented interface(s).</exception>
            <exception cref="T:System.InvalidOperationException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.ArgumentException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Problem with instatiating the Skeleton (constructor threw exception).</exception>
            <exception cref="T:System.MemberAccessException">Caller does not have permission to invoke the Skeleton constructor.</exception>
            <exception cref="T:System.TypeLoadException">Problem with building the Skeleton type, or problem with loading some dependent class.</exception>
        </member>
        <member name="M:Capnp.Rpc.CapabilityReflection.ValidateCapabilityInterface(System.Type)">
            <summary>
            Validates that a given type qualifies as cpapbility interface, throws <see cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException"/> on failure.
            </summary>
            <param name="interfaceType">type to check</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException">Given typ did not qualify as capability interface. 
            Message and probably InnterException give more details.</exception>
        </member>
        <member name="M:Capnp.Rpc.CapabilityReflection.IsValidCapabilityInterface(System.Type)">
            <summary>
            Checkes whether a given type qualifies as cpapbility interface./> on failure.
            </summary>
            <param name="interfaceType">type to check</param>
            <returns>true when <paramref name="interfaceType"/> is a capability interface</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="interfaceType"/> is null.</exception>
        </member>
        <member name="M:Capnp.Rpc.CapabilityReflection.CreateProxy``1(Capnp.Rpc.ConsumedCapability,System.String,System.String,System.Int32)">
            <summary>
            Constructs a Proxy for given capability interface and wraps it around given low-level capability.
            </summary>
            <typeparam name="TInterface">Capability interface. Must be annotated with <see cref="T:Capnp.Rpc.ProxyAttribute"/>.</typeparam>
            <param name="cap">low-level capability</param>
            <param name="memberName">debugging aid</param>
            <param name="sourceFilePath">debugging aid</param>
            <param name="sourceLineNumber">debugging aid</param>
            <returns>The Proxy instance which implements <typeparamref name="TInterface"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cap"/> is null.</exception>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException"><typeparamref name="TInterface"/> did not qualify as capability interface.</exception>
            <exception cref="T:System.InvalidOperationException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.ArgumentException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Problem with instatiating the Proxy (constructor threw exception).</exception>
            <exception cref="T:System.MemberAccessException">Caller does not have permission to invoke the Proxy constructor.</exception>
            <exception cref="T:System.TypeLoadException">Problem with building the Proxy type, or problem with loading some dependent class.</exception>
        </member>
        <member name="T:Capnp.Rpc.ConnectionState">
            <summary>
            State of an RPC connection
            </summary>
        </member>
        <member name="F:Capnp.Rpc.ConnectionState.Initializing">
            <summary>
            Connection is being initialized. This is a transient state. For TcpRpcServer it is active during
            the OnConnectionChanged event callback. For TcpRpcClient it is active before the connection is established.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.ConnectionState.Active">
            <summary>
            Connection is active.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.ConnectionState.Down">
            <summary>
            Connection is down. It will never be active again (re-connecting means to establish a new connection).
            </summary>
        </member>
        <member name="T:Capnp.Rpc.ConsumedCapability">
            <summary>
            Base class for a low-level capability at consumer side. It is created by the <see cref="T:Capnp.Rpc.RpcEngine"/>. An application does not directly interact with it
            (which is intentionally impossible, since the invocation method is internal), but instead uses a <see cref="T:Capnp.Rpc.Proxy"/>-derived wrapper.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.ConsumedCapability.ReleaseRemotely">
            <summary>
            Request the RPC engine to release this capability from its import table, 
            which usually also means to remove it from the remote peer's export table.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.IConnection">
            <summary>
            Models an RPC connection.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IConnection.State">
            <summary>
            Returns the state of this connection.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IConnection.LocalPort">
            <summary>
            TCP port (local end), or null if the connection is not yet established.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IConnection.RemotePort">
            <summary>
            TCP port (remote end), or null if the connection is not yet established.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IConnection.RecvCount">
            <summary>
            Receive message counter
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IConnection.SendCount">
            <summary>
            Sent message counter
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IConnection.IsComputing">
            <summary>
            Whether the RPC engine is currently computing.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IConnection.IsWaitingForData">
            <summary>
            Whether the connection is idle, waiting for data to receive.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.IConnection.AttachTracer(Capnp.FrameTracing.IFrameTracer)">
            <summary>
            Attaches a tracer to this connection. Only allowed in state 'Initializing'.
            </summary>
            <param name="tracer">Tracer to attach</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tracer"/> is null</exception>
            <exception cref="T:System.InvalidOperationException">Connection is not in state 'Initializing'</exception>
        </member>
        <member name="M:Capnp.Rpc.IConnection.Close">
            <summary>
            Prematurely closes this connection. Note that there is usually no need to close a connection manually. The typical use case
            of this method is to refuse an incoming connection in the <code>TcpRpcServer.OnConnectionChanged</code> callback.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.IEndpoint">
            <summary>
            A uni-directional endpoint, used in conjunction with the <see cref="T:Capnp.Rpc.RpcEngine"/>.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.IEndpoint.Forward(Capnp.WireFrame)">
            <summary>
            Transmit the given Cap'n Proto message over this endpoint.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.IEndpoint.Dismiss">
            <summary>
            Close this endpoint.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.IMonoSkeleton">
            <summary>
            A mono skeleton (as opposed to <see cref="T:Capnp.Rpc.PolySkeleton"/>) is a skeleton which implements one particular RPC interface.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IMonoSkeleton.InterfaceId">
            <summary>
            Interface ID of this skeleton.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.Impatient">
            <summary>
            Provides support for promise pipelining.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MakePipelineAware``1(Capnp.Rpc.IPromisedAnswer,System.Func{Capnp.DeserializerState,``0})">
            <summary>
            Attaches a continuation to the given promise and registers the resulting task for pipelining.
            </summary>
            <typeparam name="T">Task result type</typeparam>
            <param name="promise">The promise</param>
            <param name="then">The continuation</param>
            <returns>Task representing the future answer</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="promise"/> or <paramref name="then"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The pomise was already registered.</exception>
        </member>
        <member name="M:Capnp.Rpc.Impatient.GetAnswer(System.Threading.Tasks.Task)">
            <summary>
            Looks up the underlying promise which was previously registered for the given Task using MakePipelineAware.
            </summary>
            <param name="task"></param>
            <returns>The underlying promise</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The task was not registered using MakePipelineAware.</exception>
        </member>
        <member name="M:Capnp.Rpc.Impatient.PseudoEager``1(System.Threading.Tasks.Task{``0},System.String,System.String,System.Int32)">
            <summary>
            Returns a local "lazy" proxy for a given Task. 
            This is not real promise pipelining and will probably be removed.
            </summary>
            <typeparam name="TInterface">Capability interface type</typeparam>
            <param name="task">The task</param>
            <param name="memberName">debugging aid</param>
            <param name="sourceFilePath">debugging aid</param>
            <param name="sourceLineNumber">debugging aid</param>
            <returns>A proxy for the given task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null.</exception>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException"><typeparamref name="TInterface"/> did not
            quality as capability interface.</exception>
        </member>
        <member name="M:Capnp.Rpc.Impatient.Eager``1(System.Threading.Tasks.Task{``0},System.Boolean)">
            <summary>
            Returns a promise-pipelined Proxy for a remote method invocation Task.
            </summary>
            <typeparam name="TInterface">Capability interface type</typeparam>
            <param name="task">Task returning an interface</param>
            <param name="allowNoPipeliningFallback">If this flag is 'false', the <paramref name="task"/> MUST have been returned from a remote
            method invocation on a generated Proxy interface. Since this is the prerequisite for promise pipelining to work, the method throws an
            exception if the requirement is not met (i.e. the passed some Task instance was constructed "somewhere else"). Setting this flag to 'true'
            prevents such an exception. The method falls back to a local "lazy" proxy for the given Task. It is fully usable, but does not perform
            any promise pipelining (as specified for Cap'n Proto).</param>
            <returns>A proxy for the given future.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null.</exception>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException"><typeparamref name="TInterface"/> did not qualify as capability interface.</exception>
            <exception cref="T:System.ArgumentException">The task was not returned from a remote method invocation. Promise pipelining won't work.
            Setting <paramref name="allowNoPipeliningFallback"/>> to 'true' prevents this exception. 
            OR: Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.InvalidOperationException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Problem with instatiating the Proxy (constructor threw exception).</exception>
            <exception cref="T:System.MemberAccessException">Caller does not have permission to invoke the Proxy constructor.</exception>
            <exception cref="T:System.TypeLoadException">Problem with building the Proxy type, or problem with loading some dependent class.</exception>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MaybeTailCall``1(System.Threading.Tasks.Task{``0},System.Func{``0,Capnp.SerializerState})">
            <summary>
            Checks whether a given task belongs to a pending RPC and requests a tail call if applicable.
            </summary>
            <typeparam name="T">Task result type</typeparam>
            <param name="task">Task to request</param>
            <param name="func">Converts the task's result to a SerializerState</param>
            <returns>Tail-call aware task</returns>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MaybeTailCall``2(System.Threading.Tasks.Task{System.ValueTuple{``0,``1}},System.Func{``0,``1,Capnp.SerializerState})">
            <summary>
            Overload for tuple-typed tasks
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MaybeTailCall``3(System.Threading.Tasks.Task{System.ValueTuple{``0,``1,``2}},System.Func{``0,``1,``2,Capnp.SerializerState})">
            <summary>
            Overload for tuple-typed tasks
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MaybeTailCall``4(System.Threading.Tasks.Task{System.ValueTuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,Capnp.SerializerState})">
            <summary>
            Overload for tuple-typed tasks
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MaybeTailCall``5(System.Threading.Tasks.Task{System.ValueTuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,Capnp.SerializerState})">
            <summary>
            Overload for tuple-typed tasks
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MaybeTailCall``6(System.Threading.Tasks.Task{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,Capnp.SerializerState})">
            <summary>
            Overload for tuple-typed tasks
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Impatient.MaybeTailCall``7(System.Threading.Tasks.Task{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,Capnp.SerializerState})">
            <summary>
            Overload for tuple-typed tasks
            </summary>
        </member>
        <member name="T:Capnp.Rpc.ImportedCapability">
            <summary>
            Low-level capability which as imported from a remote peer.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.Interception.CallContext">
            <summary>
            Context of an intercepted call. Provides access to parameters and results, 
            and the possibility to redirect  the call to some other capability.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.InterfaceId">
            <summary>
            Target interface ID of this call
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.MethodId">
            <summary>
            Target method ID of this call
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.State">
            <summary>
            Lifecycle state of this call
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.InArgs">
            <summary>
            Input arguments
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.OutArgs">
            <summary>
            Output arguments ("return value")
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.Exception">
            <summary>
            Exception text, or null if there is no exception
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.ReturnCanceled">
            <summary>
            Whether the call should return in canceled state to Alice (the original caller).
            In case of forwarding (<see cref="M:Capnp.Rpc.Interception.CallContext.ForwardToBob"/>) the property is automatically set according 
            to the cancellation state of Bob's answer. However, you may override it:
            <list type="bullet">
            <item><description>Setting it from 'false' to 'true' means that we pretend Alice a canceled call.
            If Alice never requested cancellation this will surprise her pretty much.</description></item>
            <item><description>Setting it from 'true' to 'false' overrides an existing cancellation. Since
            we did not receive any output arguments from Bob (due to the cancellation), you *must* provide
            either <see cref="P:Capnp.Rpc.Interception.CallContext.OutArgs"/> or <see cref="P:Capnp.Rpc.Interception.CallContext.Exception"/>.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.CancelFromAlice">
            <summary>
            The cancellation token *from Alice* tells us when the original caller resigns from the call.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.CancelToBob">
            <summary>
            The cancellation token *to Bob* tells the target capability when we resign from the forwarded call.
            It is initialized with <seealso cref="P:Capnp.Rpc.Interception.CallContext.CancelFromAlice"/>. Override it to achieve different behaviors:
            E.g. set it to <code>CancellationToken.None</code> for "hiding" any cancellation request from Alice.
            Set it to <code>new CancellationToken(true)</code> to pretend Bob a cancellation request.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Interception.CallContext.Bob">
            <summary>
            Target capability. May be one of the following:
            <list type="bullet">
            <item><description>Capability interface implementation</description></item>
            <item><description>A <see cref="T:Capnp.Rpc.Proxy"/>-derived object</description></item>
            <item><description>A <see cref="T:Capnp.Rpc.Skeleton"/>-derived object</description></item>
            <item><description>A <see cref="T:Capnp.Rpc.ConsumedCapability"/>-derived object (low level capability)</description></item>
            <item><description>null</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Interception.CallContext.InterceptInCaps(Capnp.Rpc.Interception.IInterceptionPolicy)">
            <summary>
            Intercepts all capabilies inside the input arguments
            </summary>
            <param name="policyOverride">Policy to use, or null to further use present policy</param>
        </member>
        <member name="M:Capnp.Rpc.Interception.CallContext.InterceptOutCaps(Capnp.Rpc.Interception.IInterceptionPolicy)">
            <summary>
            Intercepts all capabilies inside the output arguments
            </summary>
            <param name="policyOverride">Policy to use, or null to further use present policy</param>
        </member>
        <member name="M:Capnp.Rpc.Interception.CallContext.UninterceptInCaps(Capnp.Rpc.Interception.IInterceptionPolicy)">
            <summary>
            Unintercepts all capabilies inside the input arguments
            </summary>
            <param name="policyOverride">Policy to remove, or null to remove present policy</param>
        </member>
        <member name="M:Capnp.Rpc.Interception.CallContext.UninterceptOutCaps(Capnp.Rpc.Interception.IInterceptionPolicy)">
            <summary>
            Unintercepts all capabilies inside the output arguments
            </summary>
            <param name="policyOverride">Policy to remove, or null to remove present policy</param>
        </member>
        <member name="M:Capnp.Rpc.Interception.CallContext.ForwardToBob">
            <summary>
            Forwards this intercepted call to the target capability ("Bob").
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Interception.CallContext.ReturnToAlice">
            <summary>
            Returns this intercepted call to the caller ("Alice").
            </summary>
        </member>
        <member name="T:Capnp.Rpc.Interception.IInterceptionPolicy">
            <summary>
            An interception policy implements callbacks for outgoing calls and returning forwarded calls.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Interception.IInterceptionPolicy.OnCallFromAlice(Capnp.Rpc.Interception.CallContext)">
            <summary>
            A caller ("Alice") initiated a new call, which is now intercepted.
            </summary>
            <param name="callContext">Context object</param>
        </member>
        <member name="M:Capnp.Rpc.Interception.IInterceptionPolicy.OnReturnFromBob(Capnp.Rpc.Interception.CallContext)">
            <summary>
            Given that the intercepted call was forwarded, it returned now from the target ("Bob")
            and may (or may not)  be returned to the original caller ("Alice").
            </summary>
            <param name="callContext"></param>
        </member>
        <member name="T:Capnp.Rpc.Interception.InterceptionState">
            <summary>
            The state of an intercepted call from Alice to Bob.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.Interception.InterceptionState.RequestedFromAlice">
            <summary>
            Alice initiated the call, but it was neither forwarded to Bob nor finished.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.Interception.InterceptionState.ForwardedToBob">
            <summary>
            The call was forwarded to Bob.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.Interception.InterceptionState.ReturnedFromBob">
            <summary>
            The call returned from Bob (to whom it was forwarded), but no result was yet forwarded to Alice.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.Interception.InterceptionState.ReturnedToAlice">
            <summary>
            The call was returned to Alice (either with results, exception, or cancelled)
            </summary>
        </member>
        <member name="T:Capnp.Rpc.Interception.Interceptor">
            <summary>
            This static class provides extension methods for intercepting and unintercepting capabilities.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Interception.Interceptor.Attach``1(Capnp.Rpc.Interception.IInterceptionPolicy,``0)">
            <summary>
            Attach this policy to given capability.
            </summary>
            <typeparam name="TCap">Capability interface type</typeparam>
            <param name="policy">Policy to attach</param>
            <param name="cap">Capability to censor</param>
            <returns>Censored capability instance</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="policy"/> is null or 
            <paramref name="cap"/> is null</exception>
        </member>
        <member name="M:Capnp.Rpc.Interception.Interceptor.Detach``1(Capnp.Rpc.Interception.IInterceptionPolicy,``0)">
            <summary>
            Detach this policy from given (censored) capability.
            </summary>
            <typeparam name="TCap">Capability interface type</typeparam>
            <param name="policy">Policy to detach</param>
            <param name="cap">Capability to clean</param>
            <returns>Clean capability instance (at least, without this interception policy)</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="policy"/> is null or 
            <paramref name="cap"/> is null</exception>
        </member>
        <member name="T:Capnp.Rpc.InvalidCapabilityInterfaceException">
            <summary>
            Will be thrown if a type did not qualify as capability interface.
            In order to qualify the type must be properly annotated with a <see cref="T:Capnp.Rpc.ProxyAttribute"/> and <see cref="T:Capnp.Rpc.SkeletonAttribute"/>.
            See descriptions of these attributes for further details.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.InvalidCapabilityInterfaceException.#ctor(System.String)">
            <summary>
            Constructs an instance.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.InvalidCapabilityInterfaceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an instance with message an inner exception.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.IPromisedAnswer">
            <summary>
            A promised answer due to RPC.
            </summary>
            <remarks>
            Disposing the instance before the answer is available results in a best effort attempt to cancel
            the ongoing call.
            </remarks>
        </member>
        <member name="P:Capnp.Rpc.IPromisedAnswer.WhenReturned">
            <summary>
            Task which will complete when the RPC returns, delivering its result struct.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.IPromisedAnswer.Access(Capnp.Rpc.MemberAccessPath)">
            <summary>
            Creates a low-level capability for promise pipelining.
            </summary>
            <param name="access">Path to the desired capability inside the result struct.</param>
            <returns>Pipelined low-level capability</returns>
        </member>
        <member name="T:Capnp.Rpc.IProvidedCapability">
            <summary>
            Low-level interface of a capability at provider side.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.IProvidedCapability.Invoke(System.UInt64,System.UInt16,Capnp.DeserializerState,System.Threading.CancellationToken)">
            <summary>
            Calls an interface method of this capability.
            </summary>
            <param name="interfaceId">ID of interface to call</param>
            <param name="methodId">ID of method to call</param>
            <param name="args">Method arguments ("params struct")</param>
            <param name="cancellationToken">Cancellation token, indicating when the call should cancelled.</param>
            <returns>A Task which will resolve to the call result ("result struct")</returns>
        </member>
        <member name="T:Capnp.Rpc.IResolvingCapability">
            <summary>
            A promised capability.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.IResolvingCapability.WhenResolved">
            <summary>
            Will eventually give the resolved capability.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.MemberAccessPath">
            <summary>
            A path from an outer Cap'n Proto struct to an inner (probably deeply nested) struct member.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.MemberAccessPath.BootstrapAccess">
            <summary>
            Path to the bootstrap capability (which is an empty path)
            </summary>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.Deserialize(Capnp.Rpc.PromisedAnswer.READER)">
            <summary>
            Deserializes a MemberAccessPath from Cap'n Proto representation.
            </summary>
            <param name="promisedAnswer">Cap'n Proto representation</param>
            <returns>The MemberAccessPath</returns>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.#ctor(System.Collections.Generic.IReadOnlyList{Capnp.Rpc.MemberAccessPath.MemberAccess})">
            <summary>
            Constructs a path from <see cref="T:Capnp.Rpc.MemberAccessPath.MemberAccess"/> qualifiers.
            </summary>
            <param name="path">List of member access elements</param>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.#ctor(System.UInt32[])">
            <summary>
            Constructs a path from Cap'n Proto struct member offsets.
            </summary>
            <param name="offsets">Member offsets</param>
        </member>
        <member name="T:Capnp.Rpc.MemberAccessPath.MemberAccess">
            <summary>
            Base class of an individual member access.
            </summary>
            <remarks>
            This might appear a bit of overengineering, since the only specialization is the <see cref="T:Capnp.Rpc.MemberAccessPath.StructMemberAccess"/>.
            But there might be further specializations in the future, the most obvious one being an "ArrayElementAccess".
            Now we already have a suitable design pattern, mainly to show the abstract concept behind a member access path.
            </remarks>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.MemberAccess.Deserialize(Capnp.Rpc.PromisedAnswer.Op.READER)">
            <summary>
            Deserializes a MemberAccess instance from Cap'n Proto representation.
            </summary>
            <param name="op">Cap'n Proto representation</param>
            <returns>Deserialized instance</returns>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.MemberAccess.Serialize(Capnp.Rpc.PromisedAnswer.Op.WRITER)">
            <summary>
            Serializes this instance to a <see cref="T:Capnp.Rpc.PromisedAnswer.Op"/>.
            </summary>
            <param name="op">Serialization target</param>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.MemberAccess.Eval(Capnp.DeserializerState)">
            <summary>
            Evaluates the member access on a given struct instance.
            </summary>
            <param name="state">Input struct instance</param>
            <returns>Member value or object</returns>
        </member>
        <member name="T:Capnp.Rpc.MemberAccessPath.StructMemberAccess">
            <summary>
            The one and only member access which is currently supported: Member of a struct.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.StructMemberAccess.#ctor(System.UInt16)">
            <summary>
            Constructs an instance for given struct member offset.
            </summary>
            <param name="offset">The Cap'n Proto struct member offset</param>
        </member>
        <member name="P:Capnp.Rpc.MemberAccessPath.StructMemberAccess.Offset">
            <summary>
            The Cap'n Proto struct member offset
            </summary>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.StructMemberAccess.Serialize(Capnp.Rpc.PromisedAnswer.Op.WRITER)">
            <summary>
            Serializes this instance to a <see cref="T:Capnp.Rpc.PromisedAnswer.Op"/>.
            </summary>
            <param name="op">Serialization target</param>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.StructMemberAccess.Eval(Capnp.DeserializerState)">
            <summary>
            Evaluates the member access on a given struct instance.
            </summary>
            <param name="state">Input struct instance</param>
            <returns>Member value or object</returns>
        </member>
        <member name="P:Capnp.Rpc.MemberAccessPath.Path">
            <summary>
            The access path is a composition of individual member accesses.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.Serialize(Capnp.Rpc.PromisedAnswer.WRITER)">
            <summary>
            Serializes this path th a <see cref="T:Capnp.Rpc.PromisedAnswer"/>.
            </summary>
            <param name="promisedAnswer">The serialization target</param>
        </member>
        <member name="M:Capnp.Rpc.MemberAccessPath.Eval(Capnp.DeserializerState)">
            <summary>
            Evaluates the path on a given object.
            </summary>
            <param name="rpcState">The object (usually "params struct") on which to evaluate this path.</param>
            <returns>Resulting low-level capability</returns>
            <exception cref="T:Capnp.DeserializationException">Evaluation of this path did not give a capability</exception>
        </member>
        <member name="T:Capnp.Rpc.PendingQuestion">
            <summary>
            A promised answer due to RPC.
            </summary>
            <remarks>
            Disposing the instance before the answer is available results in a best effort attempt to cancel
            the ongoing call.
            </remarks>
        </member>
        <member name="T:Capnp.Rpc.PendingQuestion.State">
            <summary>
            Question lifetime management state
            </summary>
        </member>
        <member name="F:Capnp.Rpc.PendingQuestion.State.None">
            <summary>
            The question has not yet been sent.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.PendingQuestion.State.TailCall">
            <summary>
            Tail call flag
            </summary>
        </member>
        <member name="F:Capnp.Rpc.PendingQuestion.State.Sent">
            <summary>
            The question has been sent.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.PendingQuestion.State.Returned">
            <summary>
            The question has been answered.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.PendingQuestion.State.FinishRequested">
            <summary>
            A 'finish' request was sent to the peer, indicating that no further requests will refer
            to this question.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.PendingQuestion.State.Disposed">
            <summary>
            Question object was disposed.
            </summary>
        </member>
        <member name="F:Capnp.Rpc.PendingQuestion.State.Finalized">
            <summary>
            Question object was finalized by GC. 
            This flag should only be observable when debugging the finalizer itself.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.PendingQuestion.WhenReturned">
            <summary>
            Eventually returns the server answer
            </summary>
        </member>
        <member name="M:Capnp.Rpc.PendingQuestion.Access(Capnp.Rpc.MemberAccessPath)">
            <summary>
            Refer to a (possibly nested) member of this question's (possibly future) result and return
            it as a capability.
            </summary>
            <param name="access">Access path</param>
            <returns>Low-level capability</returns>
            <exception cref="T:Capnp.DeserializationException">The referenced member does not exist or does not resolve to a capability pointer.</exception>
        </member>
        <member name="M:Capnp.Rpc.PendingQuestion.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Capnp.Rpc.PendingQuestion.Dispose">
            <summary>
            Implements <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.PolySkeleton">
            <summary>
            Combines multiple skeletons to represent objects which implement multiple interfaces.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.PolySkeleton.AddInterface(System.UInt64,Capnp.Rpc.Skeleton)">
            <summary>
            Adds a skeleton to this instance.
            </summary>
            <param name="interfaceId">Interface ID</param>
            <param name="skeleton">Skeleton to add</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="skeleton"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">A skeleton with <paramref name="interfaceId"/> was already added.</exception>
        </member>
        <member name="M:Capnp.Rpc.PolySkeleton.Invoke(System.UInt64,System.UInt16,Capnp.DeserializerState,System.Threading.CancellationToken)">
            <summary>
            Calls an interface method of this capability.
            </summary>
            <param name="interfaceId">ID of interface to call</param>
            <param name="methodId">ID of method to call</param>
            <param name="args">Method arguments ("params struct")</param>
            <param name="cancellationToken">Cancellation token, indicating when the call should cancelled.</param>
            <returns>A Task which will resolve to the call result</returns>
        </member>
        <member name="M:Capnp.Rpc.PolySkeleton.Dispose(System.Boolean)">
            <summary>
            Dispose pattern implementation
            </summary>
        </member>
        <member name="T:Capnp.Rpc.Proxy">
            <summary>
            Application-level wrapper for consumer-side capabilities.
            The code generator will produce a Proxy specialization for each capability interface.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Proxy.WhenResolved">
            <summary>
            Will eventually give the resolved capability, if this is a promised capability.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Proxy.ConsumedCap">
            <summary>
            Underlying low-level capability
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Proxy.IsNull">
            <summary>
            Whether is this a broken capability.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Proxy.Call(System.UInt64,System.UInt16,Capnp.DynamicSerializerState,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls a method of this capability.
            </summary>
            <param name="interfaceId">Interface ID to call</param>
            <param name="methodId">Method ID to call</param>
            <param name="args">Method arguments ("param struct")</param>
            <param name="obsoleteAndIgnored">This flag is ignored. It is there to preserve compatibility with the
            code generator and will be removed in future versions.</param>
            <param name="cancellationToken">For cancelling an ongoing method call</param>
            <returns>An answer promise</returns>
            <exception cref="T:System.ObjectDisposedException">This instance was disposed, or transport-layer stream was disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Capability is broken.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:Capnp.Rpc.Proxy.#ctor">
            <summary>
            Constructs a null instance.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Proxy.Dispose(System.Boolean)">
            <summary>
            Dispose pattern implementation
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Proxy.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Proxy.Dispose">
            <summary>
            Dispose pattern implementation
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Proxy.Cast``1(System.Boolean)">
            <summary>
            Casts this Proxy to a different capability interface.
            </summary>
            <typeparam name="T">Desired capability interface</typeparam>
            <param name="disposeThis">Whether to Dispose() this Proxy instance</param>
            <returns>Proxy for desired capability interface</returns>
            <exception cref="T:Capnp.Rpc.InvalidCapabilityInterfaceException"><typeparamref name="T"/> did not qualify as capability interface.</exception>
            <exception cref="T:System.InvalidOperationException">This capability is broken, or mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.ArgumentException">Mismatch between generic type arguments (if capability interface is generic).</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">Problem with instatiating the Proxy (constructor threw exception).</exception>
            <exception cref="T:System.MemberAccessException">Caller does not have permission to invoke the Proxy constructor.</exception>
            <exception cref="T:System.TypeLoadException">Problem with building the Proxy type, or problem with loading some dependent class.</exception>
        </member>
        <member name="T:Capnp.Rpc.ProxyAttribute">
            <summary>
            Annotates a capability interface with its Proxy implementation.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.ProxyAttribute.#ctor(System.Type)">
            <summary>
            Constructs this attribute.
            </summary>
            <param name="proxyClass">Proxy type. This must be a class which inherits from <see cref="T:Capnp.Rpc.Proxy"/> and
            exposes a public parameterless constructor. Moreover, it must have same amount of generic type
            parameters like the annotated interface, with identical generic constraints.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="proxyClass"/> is null.</exception>
        </member>
        <member name="P:Capnp.Rpc.ProxyAttribute.ProxyClass">
            <summary>
            The Proxy type.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.RefCountingCapability.Dispose(System.Boolean)">
            <summary>
            Part of the Dispose pattern implementation.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.RpcEngine">
            <summary>
            Implements the Cap'n Proto RPC protocol.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.RpcEngine.BootstrapCap">
            <summary>
            Gets or sets the bootstrap capability.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.RpcException">
            <summary>
            Thrown when an RPC-related error condition occurs.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.RpcException.#ctor(System.String)">
            <summary>
            Constructs an instance.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.RpcException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an instance with message and inner exception.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.Skeleton">
            <summary>
            A skeleton is a wrapper around a capability interface implementation which adapts it in the way it is
            expected by the <see cref="T:Capnp.Rpc.RpcEngine"/>.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Skeleton.Claim``1(``0)">
            <summary>
            Claims ownership on the given capability, preventing its automatic disposal.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
            <param name="impl">Capability implementation</param>
            <returns>A disposable object. Calling Dispose() on the returned instance relinquishes ownership again.</returns>
        </member>
        <member name="M:Capnp.Rpc.Skeleton.Invoke(System.UInt64,System.UInt16,Capnp.DeserializerState,System.Threading.CancellationToken)">
            <summary>
            Calls an interface method of this capability.
            </summary>
            <param name="interfaceId">ID of interface to call</param>
            <param name="methodId">ID of method to call</param>
            <param name="args">Method arguments ("params struct")</param>
            <param name="cancellationToken">Cancellation token, indicating when the call should cancelled.</param>
            <returns>A Task which will resolve to the call result</returns>
        </member>
        <member name="M:Capnp.Rpc.Skeleton.Dispose(System.Boolean)">
            <summary>
            Dispose pattern implementation
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Skeleton.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="T:Capnp.Rpc.Skeleton`1">
            <summary>
            Skeleton for a specific capability interface.
            </summary>
            <typeparam name="T">Capability interface</typeparam>
        </member>
        <member name="M:Capnp.Rpc.Skeleton`1.#ctor">
            <summary>
            Constructs an instance.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Skeleton`1.SetMethodTable(System.Func{Capnp.DeserializerState,System.Threading.CancellationToken,System.Threading.Tasks.Task{Capnp.Rpc.AnswerOrCounterquestion}}[])">
            <summary>
            Populates this skeleton's method table. The method table maps method IDs (which are consecutively numbered from 0 
            onwards) to the underlying capability's method implementations.
            </summary>
            <param name="methods">The method table. Index is method ID.</param>
        </member>
        <member name="P:Capnp.Rpc.Skeleton`1.Impl">
            <summary>
            Gets the underlying capability implementation.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.Skeleton`1.InterfaceId">
            <summary>
            Gets the ID of the implemented interface.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.Skeleton`1.Invoke(System.UInt64,System.UInt16,Capnp.DeserializerState,System.Threading.CancellationToken)">
            <summary>
            Calls an interface method of this capability.
            </summary>
            <param name="interfaceId">ID of interface to call</param>
            <param name="methodId">ID of method to call</param>
            <param name="args">Method arguments ("params struct")</param>
            <param name="cancellationToken">Cancellation token, indicating when the call should cancelled.</param>
            <returns>A Task which will resolve to the call result</returns>
            <exception cref="T:System.ObjectDisposedException">This Skeleton was disposed</exception>
        </member>
        <member name="M:Capnp.Rpc.Skeleton`1.Dispose(System.Boolean)">
            <summary>
            Dispose pattern implementation
            </summary>
        </member>
        <member name="T:Capnp.Rpc.SkeletonAttribute">
            <summary>
            Annotates a capability interface with its Skeleton implementation.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.SkeletonAttribute.#ctor(System.Type)">
            <summary>
            Constructs this attribute.
            </summary>
            <param name="skeletonClass">Skeleton type. This must be a class which inherits from <see cref="T:Capnp.Rpc.Skeleton"/> and
            exposes a public parameterless constructor. Moreover, it must have same amount of generic type
            parameters like the annotated interface, with identical generic constraints.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="skeletonClass"/> is null.</exception>
        </member>
        <member name="P:Capnp.Rpc.SkeletonAttribute.SkeletonClass">
            <summary>
            Gets the skeleton type.
            </summary>
        </member>
        <member name="T:Capnp.Rpc.TcpRpcClient">
            <summary>
            TCP-based RPC implementation which will establish a connection to a TCP server implementing 
            the Cap'n Proto RPC protocol.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.WhenConnected">
            <summary>
            Gets a Task which completes when TCP is connected. Will be
            null until connection is actually requested (either by calling Connect or using appropriate constructor).
            </summary>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcClient.#ctor(System.String,System.Int32)">
            <summary>
            Constructs an instance and attempts to connect it to given host.
            </summary>
            <param name="host">The DNS name of the remote RPC host</param>
            <param name="port">The port number of the remote RPC host</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between System.Net.IPEndPoint.MinPort and System.Net.IPEndPoint.MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcClient.#ctor">
            <summary>
            Constructs an instance but does not yet attempt to connect.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcClient.Connect(System.String,System.Int32)">
            <summary>
            Attempts to connect it to given host.
            </summary>
            <param name="host">The DNS name of the remote RPC host</param>
            <param name="port">The port number of the remote RPC host</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="host"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between System.Net.IPEndPoint.MinPort and System.Net.IPEndPoint.MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket.</exception>
            <exception cref="T:System.InvalidOperationException">Connection was already requested</exception>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcClient.GetMain``1">
            <summary>
            Returns the remote bootstrap capability.
            </summary>
            <typeparam name="TProxy">Bootstrap capability interface</typeparam>
            <returns>A proxy for the bootstrap capability</returns>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcClient.Dispose">
            <summary>
            Dispose pattern implementation
            </summary>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcClient.AttachTracer(Capnp.FrameTracing.IFrameTracer)">
            <summary>
            Attaches a tracer to this connection. Only allowed in state 'Initializing'. To avoid race conditions, 
            this method should only be used  in conjunction with the parameterless constructor (no auto-connect).
            Call this method *before* calling Connect.
            </summary>
            <param name="tracer">Tracer to attach</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tracer"/> is null</exception>
            <exception cref="T:System.InvalidOperationException">Connection is not in state 'Initializing'</exception>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcClient.Capnp#Rpc#IConnection#Close">
            <summary>
            Prematurely closes this connection. Note that there is usually no need to close a connection manually.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.State">
            <summary>
            Returns the state of this connection.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.SendCount">
            <summary>
            Gets the number of RPC protocol messages sent by this client so far.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.RecvCount">
            <summary>
            Gets the number of RPC protocol messages received by this client so far.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.RemotePort">
            <summary>
            Gets the remote port number which this client is connected to, 
            or null if the connection is not yet established.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.LocalPort">
            <summary>
            Gets the local port number which this client using, 
            or null if the connection is not yet established.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.IsComputing">
            <summary>
            Whether the I/O thread is currently running
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcClient.IsWaitingForData">
            <summary>
            Whether the I/O thread is waiting for data to receive
            </summary>
        </member>
        <member name="T:Capnp.Rpc.ConnectionEventArgs">
            <summary>
            Carries information on RPC connection state changes.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.ConnectionEventArgs.Connection">
            <summary>
            Affected connection
            </summary>
        </member>
        <member name="M:Capnp.Rpc.ConnectionEventArgs.#ctor(Capnp.Rpc.IConnection)">
            <summary>
            Constructs an instance
            </summary>
            <param name="connection">RPC connection object</param>
        </member>
        <member name="T:Capnp.Rpc.TcpRpcServer">
            <summary>
            Cap'n Proto RPC TCP server.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcServer.ConnectionCount">
            <summary>
            Gets the number of currently active inbound TCP connections.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcServer.Dispose">
            <summary>
            Stops accepting incoming attempts and closes all existing connections.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcServer.StopListening">
            <summary>
            Stops accepting incoming attempts.
            </summary>
        </member>
        <member name="M:Capnp.Rpc.TcpRpcServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructs an instance.
            </summary>
            <param name="localAddr">An System.Net.IPAddress that represents the local IP address.</param>
            <param name="port">The port on which to listen for incoming connection attempts.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localAddr"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port"/> is not between System.Net.IPEndPoint.MinPort and System.Net.IPEndPoint.MaxPort.</exception>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcServer.IsAlive">
            <summary>
            Whether the thread which is responsible for acception incoming attempts is still alive.
            The thread will die upon disposal, but also in case of a socket error condition.
            Errors which occur on a particular connection will just close that connection and won't interfere
            with the acceptor thread.
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcServer.Main">
            <summary>
            Sets the bootstrap capability. It must be an object which implements a valid capability interface
            (<see cref="T:Capnp.Rpc.SkeletonAttribute"/>).
            </summary>
        </member>
        <member name="P:Capnp.Rpc.TcpRpcServer.Connections">
            <summary>
            Gets a snapshot of currently active connections.
            </summary>
        </member>
        <member name="E:Capnp.Rpc.TcpRpcServer.OnConnectionChanged">
            <summary>
            Fires when a new incoming connection was accepted, or when an active connection is closed.
            </summary>
        </member>
        <member name="T:Capnp.SecurityOptions">
            <summary>
            Provides the security bounds for defeating amplification and stack overflow DoS attacks.
            See https://capnproto.org/encoding.html#security-considerations for details.
            </summary>
        </member>
        <member name="P:Capnp.SecurityOptions.TraversalLimit">
            <summary>
            The traversal limit, see https://capnproto.org/encoding.html#amplification-attack
            </summary>
        </member>
        <member name="P:Capnp.SecurityOptions.RecursionLimit">
            <summary>
            The recursion limit, see https://capnproto.org/encoding.html#stack-overflow-dos-attack
            </summary>
        </member>
        <member name="T:Capnp.SegmentAllocator">
            <summary>
            The segment allocator default implementation.
            </summary>
        </member>
        <member name="M:Capnp.SegmentAllocator.#ctor(System.Int32)">
            <summary>
            Constructs an instance.
            </summary>
            <param name="defaultSegmentSize">Default size (in words) of a newly allocated segment. If a single allocation requires 
            a bigger size, a bigger dedicated segment will be allocated. On the wire, segments will be truncated to their actual
            occupancies.</param>
        </member>
        <member name="P:Capnp.SegmentAllocator.Segments">
            <summary>
            The list of currently allocated segments, each one truncated to its actual occupancy.
            </summary>
        </member>
        <member name="M:Capnp.SegmentAllocator.Allocate(System.UInt32,System.UInt32,Capnp.SegmentSlice@,System.Boolean)">
            <summary>
            Allocates memory.
            </summary>
            <param name="nwords">Number of words to allocate</param>
            <param name="preferredSegmentIndex">Preferred segment index. If enough space is available, 
            memory will be allocated inside that segment. Otherwise, a different segment will be chosen, or
            a new one will be allocated, or allocation will fail (depending on <paramref name="forcePreferredSegment"/>).</param>
            <param name="result">The allocated memory slice in case of success (<code>default(SegmentSlice) otherwise)</code></param>
            <param name="forcePreferredSegment">Whether using the preferred segment is mandatory. If it is and there is not
            enough space available, allocation will fail.</param>
            <returns>Whether allocation was successful.</returns>
        </member>
        <member name="T:Capnp.SegmentSlice">
            <summary>
            Helper struct to represent the tuple (segment index, offset)
            </summary>
        </member>
        <member name="F:Capnp.SegmentSlice.SegmentIndex">
            <summary>
            Segment index
            </summary>
        </member>
        <member name="F:Capnp.SegmentSlice.Offset">
            <summary>
            Word offset within segment
            </summary>
        </member>
        <member name="T:Capnp.SerializerExtensions">
            <summary>
            Provides extensions to the <see cref="T:Capnp.IStructDeserializer"/> and <see cref="T:Capnp.IStructSerializer"/> interfaces for type-safe reading and writing.
            </summary>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataBool``1(``0,System.UInt64,System.Boolean)">
            <summary>
            Reads a boolean field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Writes a boolean field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataByte``1(``0,System.UInt64,System.Byte)">
            <summary>
            Reads a byte field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.Byte,System.Byte)">
            <summary>
            Writes a byte field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataSByte``1(``0,System.UInt64,System.SByte)">
            <summary>
            Reads a signed byte field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.SByte,System.SByte)">
            <summary>
            Writes a signed byte field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataUShort``1(``0,System.UInt64,System.UInt16)">
            <summary>
            Reads a ushort field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.UInt16,System.UInt16)">
            <summary>
            Writes a ushort field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataShort``1(``0,System.UInt64,System.Int16)">
            <summary>
            Reads a short field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.Int16,System.Int16)">
            <summary>
            Writes a short field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataUInt``1(``0,System.UInt64,System.UInt32)">
            <summary>
            Reads a uint field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.UInt32,System.UInt32)">
            <summary>
            Writes a uint field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.RefData``1(Capnp.IStructSerializer,System.Int32)">
            <summary>
            Performs a "reinterpret cast" of the struct's data section and returns a reference to a single element of the cast result.
            </summary>
            <typeparam name="U">The cast target type. Must be a primitive type which qualifies for <code><![CDATA[MemoryMarshal.Cast<ulong, U>()]]></code></typeparam>
            <param name="d">"this" instance</param>
            <param name="woffset">Index within the cast result, conceptually into <code>U[]</code></param>
            <returns>A reference to the data element</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataInt``1(``0,System.UInt64,System.Int32)">
            <summary>
            Reads an int field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.Int32,System.Int32)">
            <summary>
            Writes an int field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataULong``1(``0,System.UInt64,System.UInt64)">
            <summary>
            Reads a ulong field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Writes a ulong field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataLong``1(``0,System.UInt64,System.Int64)">
            <summary>
            Reads a long field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.Int64,System.Int64)">
            <summary>
            Writes a long field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataFloat``1(``0,System.UInt64,System.Single)">
            <summary>
            Reads a float field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (raw bits will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.Single,System.Single)">
            <summary>
            Writes a float field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (raw bits will be XORed with the value to write)</param>
        </member>
        <member name="M:Capnp.SerializerExtensions.ReadDataDouble``1(``0,System.UInt64,System.Double)">
            <summary>
            Reads a double field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructDeserializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="defaultValue">Field default value (raw bits will be XORed with the result)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Capnp.SerializerExtensions.WriteData``1(``0,System.UInt64,System.Double,System.Double)">
            <summary>
            Writes a double field.
            </summary>
            <typeparam name="T">Type implementing <see cref="T:Capnp.IStructSerializer"/></typeparam>
            <param name="d">"this" instance</param>
            <param name="bitOffset">Start bit</param>
            <param name="value">Value to write</param>
            <param name="defaultValue">Field default value (raw bits will be XORed with the value to write)</param>
        </member>
        <member name="T:Capnp.SerializerState">
            <summary>
            Implements the heart of serialization. Exposes all functionality to encode serialized data.
            Although it is public, you should not use it directly. Instead, use the reader, writer, and domain class adapters which are produced
            by the code generator. Particularly, those writer classes are actually specializations of SerializerState, adding convenience methods
            for accessing the struct's fields.
            </summary>
        </member>
        <member name="M:Capnp.SerializerState.CreateForRpc``1">
            <summary>
            Constructs a SerializerState instance for use in RPC context.
            This particularly means that the capability table will be initialized.
            </summary>
            <typeparam name="T">Type of state (must inherit from SerializerState)</typeparam>
            <returns>root object state</returns>
        </member>
        <member name="M:Capnp.SerializerState.#ctor">
            <summary>
            Constructs an unbound serializer state.
            </summary>
        </member>
        <member name="M:Capnp.SerializerState.#ctor(Capnp.MessageBuilder)">
            <summary>
            Constructs a serializer state which is bound to a particular message builder.
            </summary>
            <param name="messageBuilder">message builder to bind</param>
        </member>
        <member name="M:Capnp.SerializerState.Rewrap``1">
            <summary>
            Represents this state by a different serializer state specialization. This is similar to a type-cast: The underlying object remains the same,
            but the specialization adds a particular "view" on that data.
            </summary>
            <typeparam name="TS">target serializer state type</typeparam>
            <returns>serializer state instance</returns>
            <exception cref="T:System.InvalidOperationException">The target serializer state is incompatible to this instance, because the instances do not agree on the
            kind of underlying object (e.g. struct with particular data/pointer section size, list of something)</exception>
        </member>
        <member name="P:Capnp.SerializerState.IsAllocated">
            <summary>
            Whether storage space for the underlying object was already allocated. Note that allocation happens
            lazily, i.e. constructing a SerializerState and binding it to a MessageBuilder does NOT yet result in allocation.
            </summary>
        </member>
        <member name="P:Capnp.SerializerState.StructDataSection">
            <summary>
            Given this state describes a struct and is allocated, returns the struct's data section.
            </summary>
        </member>
        <member name="P:Capnp.SerializerState.RawData">
            <summary>
            Returns the allocated memory slice (given this state already is allocated). Note that this definition is somewhat
            non-symmetric to <code>DeserializerState.RawData</code>. Never mind: You should not use it directly, anyway.
            </summary>
        </member>
        <member name="M:Capnp.SerializerState.Allocate">
            <summary>
            Allocates storage for the underlying object. Does nothing if it is already allocated. From the point the object is allocated, its type cannot by changed
            anymore (e.g. changing from struct to list, or modifying the struct's section sizes).
            </summary>
        </member>
        <member name="M:Capnp.SerializerState.Link(System.Int32,Capnp.SerializerState,System.Boolean)">
            <summary>
            Links a sub-item (struct field or list element) of this state to another state. Usually, this operation is not necessary, since objects are constructed top-down.
            However, there might be some advanced scenarios where you want to reference the same object twice (also interesting for designing amplification attacks).
            The Cap'n Proto serialization intrinsically supports this, since messages are object graphs, not trees.
            </summary>
            <param name="slot">If this state describes a struct: Index into this struct's pointer table. 
            If this state describes a list of pointers: List element index.</param>
            <param name="target">state to be linked</param>
            <param name="allowCopy">Whether to deep copy the target state if it belongs to a different message builder than this state.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="slot"/> out of range</exception>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>This state does neither describe a struct, nor a list of pointers</description></item>
            <item><description>Another state is already linked to the specified position (sorry, no overwrite allowed)</description></item>
            <item><description>This state and <paramref name="target"/> belong to different message builder, and<paramref name="allowCopy"/> is false</description></item>
            </list>
            </exception>
        </member>
        <member name="M:Capnp.SerializerState.LinkToCapability(System.Int32,System.UInt32)">
            <summary>
            Links a sub-item (struct field or list element) of this state to a capability.
            </summary>
            <param name="slot">If this state describes a struct: Index into this struct's pointer table. 
            If this state describes a list of pointers: List element index.</param>
            <param name="capabilityIndex">capability index inside the capability table</param>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>This state does neither describe a struct, nor a list of pointers</description></item>
            <item><description>Another state is already linked to the specified position (sorry, no overwrite allowed)</description></item></list>
            </exception>
        </member>
        <member name="M:Capnp.SerializerState.SetStruct(System.UInt16,System.UInt16)">
            <summary>
            Determines the underlying object to be a struct.
            </summary>
            <param name="dataCount">Desired size of the struct's data section, in words</param>
            <param name="ptrCount">Desired size of the struct's pointer section, in words</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
        </member>
        <member name="M:Capnp.SerializerState.SetListOfValues(System.Byte,System.Int32)">
            <summary>
            Determines the underlying object to be a list of (primitive) values.
            </summary>
            <param name="bitsPerElement">Element size in bits, must be 0 (void), 1 (bool), 8, 16, 32, or 64</param>
            <param name="totalCount">Desired element count</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bitsPerElement"/> outside allowed range, 
            <paramref name="totalCount"/> negative or exceeding 2^29-1</exception>
        </member>
        <member name="M:Capnp.SerializerState.SetListOfPointers(System.Int32)">
            <summary>
            Determines the underlying object to be a list of pointers.
            </summary>
            <param name="totalCount">Desired element count</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalCount"/> negative or exceeding 2^29-1</exception>
        </member>
        <member name="M:Capnp.SerializerState.SetListOfStructs(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Determines the underlying object to be a list of structs (fixed-width compound list).
            </summary>
            <param name="totalCount">Desired element count</param>
            <param name="dataCount">Desired size of each struct's data section, in words</param>
            <param name="ptrCount">Desired size of each struct's pointer section, in words</param>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="totalCount"/> negative, or total word count would exceed 2^29-1</exception>
        </member>
        <member name="M:Capnp.SerializerState.WriteText(System.String)">
            <summary>
            Determines the underlying object to be a list of bytes and encodes the given text.
            </summary>
            <param name="text">text to encode</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> is null</exception>
            <exception cref="T:System.Text.EncoderFallbackException">Trying to obtain the UTF-8 encoding might throw this exception.</exception>
            <exception cref="T:System.InvalidOperationException">The object type was already set to something different</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">UTF-8 encoding exceeds 2^29-2 bytes</exception>
        </member>
        <member name="M:Capnp.SerializerState.StructWriteData(System.UInt64,System.Int32,System.UInt64)">
            <summary>
            Writes data (up to 64 bits) into the underlying struct's data section. 
            The write operation must be aligned to fit within a single word.
            </summary>
            <param name="bitOffset">Start bit relative to the struct's data section, little endian</param>
            <param name="bitCount">Number of bits to write</param>
            <param name="value">Data bits to write</param>
            <exception cref="T:System.InvalidOperationException">The object was not determined to be a struct</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The data slice specified by <paramref name="bitOffset"/> and <paramref name="bitCount"/>
            is not completely within the struct's data section, misaligned, exceeds one word, or <paramref name="bitCount"/> is negative</exception>
        </member>
        <member name="M:Capnp.SerializerState.StructReadData(System.UInt64,System.Int32)">
            <summary>
            Reads data (up to 64 bits) from the underlying struct's data section. 
            The write operation must be aligned to fit within a single word.
            </summary>
            <param name="bitOffset">Start bit relative to the struct's data section, little endian</param>
            <param name="count">Number of bits to read</param>
            <returns>Data bits which were read</returns>
            <exception cref="T:System.InvalidOperationException">The object was not determined to be a struct</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The data slice specified by <paramref name="bitOffset"/> and <paramref name="count"/>
            is not completely within the struct's data section, misaligned, exceeds one word, or <paramref name="count"/> is negative</exception>
        </member>
        <member name="M:Capnp.SerializerState.BuildPointer``1(System.Int32)">
            <summary>
            Constructs a new object at a struct field or list element, or returns the serializer state for an existing object.
            </summary>
            <typeparam name="TS">Target state type</typeparam>
            <param name="index">If the underlying object is a struct: index into the struct's pointer section.
            If the underlying object is a list of pointers: Element index</param>
            <returns>Bound serializer state instance</returns>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>The underlying object was not determined to be a struct or list of pointers.</description></item>
            <item><description>Object at given position was already built and is not compatible with the desired target serializer type.</description></item>
            </list></exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.TryGetPointer``1(System.Int32)">
            <summary>
            Returns an existing serializer state for a struct field or list element, or null if no such object exists.
            </summary>
            <typeparam name="TS">Target state type</typeparam>
            <param name="index">If the underlying object is a struct: index into the struct's pointer section.
            If the underlying object is a list of pointers: Element index</param>
            <returns>Bound serializer state instance</returns>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>The underlying object was not determined to be a struct or list of pointers.</description></item>
            <item><description>Object at given position is not compatible with the desired target serializer type.</description></item>
            </list></exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.BuildPointer(System.Int32)">
            <summary>
            Convenience method for <code><![CDATA[BuildPointer<DynamicSerializerState>]]></code>
            </summary>
            <param name="index">If the underlying object is a struct: index into the struct's pointer section.
            If the underlying object is a list of pointers: Element index</param>
            <returns>Bound serializer state instance</returns>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>The underlying object was not determined to be a struct or list of pointers.</description></item>
            <item><description>Object at given position was already built and is not compatible with the desired target serializer type.</description></item>
            </list></exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.TryGetPointer(System.Int32)">
            <summary>
            Convenience method for <code><![CDATA[TryGetPointer<SerializerState>]]></code>
            </summary>
            <param name="index">If the underlying object is a struct: index into the struct's pointer section.
            If the underlying object is a list of pointers: Element index</param>
            <returns>Bound serializer state instance</returns>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>The underlying object was not determined to be a struct or list of pointers.</description></item>
            <item><description>Object at given position is not compatible with the desired target serializer type.</description></item>
            </list></exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ReadText(System.Int32,System.String)">
            <summary>
            Reads text from a struct field or list element.
            </summary>
            <param name="index">If the underlying object is a struct: index into the struct's pointer section.
            If the underlying object is a list of pointers: Element index</param>
            <param name="defaultText">String to return in case of null</param>
            <returns>The decoded text</returns>
        </member>
        <member name="M:Capnp.SerializerState.WriteText(System.Int32,System.String)">
            <summary>
            Encodes text into a struct field or list element.
            </summary>
            <param name="index">If the underlying object is a struct: index into the struct's pointer section.
            If the underlying object is a list of pointers: Element index</param>
            <param name="text">Text to encode</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/>is null</exception>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>The underlying object was not determined to be a struct or list of pointers.</description></item>
            <item><description>Object at given position was already set.</description></item>
            </list></exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.WriteText(System.Int32,System.String,System.String)">
            <summary>
            Encodes text into a struct field or list element, with fallback to a default text.
            </summary>
            <param name="index">If the underlying object is a struct: index into the struct's pointer section.
            If the underlying object is a list of pointers: Element index</param>
            <param name="text">Text to encode</param>
            <param name="defaultText">Default text of <paramref name="text"/>> is null</param>
            <exception cref="T:System.ArgumentNullException">Both <paramref name="text"/> and <paramref name="defaultText"/> are null</exception>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>The underlying object was not determined to be a struct or list of pointers.</description></item>
            <item><description>Object at given position was already set.</description></item>
            </list></exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListBuildStruct(System.Int32)">
            <summary>
            Returns a state which represents a fixed-width composite list element.
            </summary>
            <param name="index">Element index</param>
            <returns>Bound serializer state</returns>
            <exception cref="T:System.InvalidOperationException">Underlying object was not determined to be a fixed-width composite list.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListBuildStruct``1(System.Int32)">
            <summary>
            Returns a state which represents a fixed-width composite list element.
            </summary>
            <typeparam name="TS">Target serializer state type</typeparam>
            <param name="index"></param>
            <returns>Bound serializer state</returns>
            <exception cref="T:System.InvalidOperationException">Underlying object was not determined to be a fixed-width composite list.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets an element of a list of bits.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of bits.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValues(System.Collections.Generic.IReadOnlyList{System.Boolean},System.Boolean)">
            <summary>
            Sets the list-of-bits' content.
            </summary>
            <param name="values">Content to set</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of bits.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The given element count does not match the underlying list's element count.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.Byte,System.Byte)">
            <summary>
            Sets an element of a list of bytes.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of bytes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListGetBytes">
            <summary>
            Returns the content of a list of bytes.
            </summary>
            <returns>The list bytes</returns>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of bytes.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListReadAsText">
            <summary>
            Decodes a list of bytes as text.
            </summary>
            <returns>The decoded text.</returns>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of bytes.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">Might theoretically be thrown during decoding.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.SByte,System.SByte)">
            <summary>
            Sets an element of a list of (signed) bytes.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of bytes.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Sets an element of a list of 16 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 16 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.Int16,System.Int16)">
            <summary>
            Sets an element of a list of 16 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 16 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Sets an element of a list of 32 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 32 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets an element of a list of 32 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 32 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.Single,System.Single)">
            <summary>
            Sets an element of a list of 32 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 32 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.UInt64,System.UInt64)">
            <summary>
            Sets an element of a list of 64 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 64 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.Int64,System.Int64)">
            <summary>
            Sets an element of a list of 64 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 64 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ListWriteValue(System.Int32,System.Double,System.Double)">
            <summary>
            Sets an element of a list of 64 bit words.
            </summary>
            <param name="index">Element index</param>
            <param name="value">Element value</param>
            <param name="defaultValue">Element default value (serialized value will be XORed with the default value)</param>
            <exception cref="T:System.InvalidOperationException">The underlying object was not set to a list of 64 bit words.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is out of bounds.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ProvideCapability(Capnp.Rpc.ConsumedCapability)">
            <summary>
            Adds an entry to the capability table if the provided capability does not yet exist.
            </summary>
            <param name="capability">The low-level capability object to provide.</param>
            <returns>Index of the given capability in the capability table</returns>
            <exception cref="T:System.InvalidOperationException">The underlying message builder was not configured for capability table support.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ProvideCapability(Capnp.Rpc.Skeleton)">
            <summary>
            Adds an entry to the capability table if the provided capability does not yet exist.
            </summary>
            <param name="capability">The capability to provide, in terms of its skeleton.</param>
            <returns>Index of the given capability in the capability table</returns>
            <exception cref="T:System.InvalidOperationException">The underlying message builder was not configured for capability table support.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ProvideCapability(System.Object)">
            <summary>
            Adds an entry to the capability table if the provided capability does not yet exist.
            </summary>
            <param name="obj">The capability, in one of the following forms:<list type="bullet">
            <item><description>Low-level capability object (<code>Rpc.ConsumedCapability</code>)</description></item>
            <item><description>Proxy object (<code>Rpc.Proxy</code>)</description></item>
            <item><description>Skeleton object (<code>Rpc.Skeleton</code>)</description></item>
            <item><description>Capability interface implementation</description></item>
            </list></param>
            <returns>Index of the given capability in the capability table</returns>
            <exception cref="T:System.InvalidOperationException">The underlying message builder was not configured for capability table support.</exception>
        </member>
        <member name="M:Capnp.SerializerState.LinkObject``1(System.Int32,``0)">
            <summary>
            Links a sub-item (struct field or list element) of this state to another object. 
            In contrast to <see cref="M:Capnp.SerializerState.Link(System.Int32,Capnp.SerializerState,System.Boolean)"/>, this method also accepts deserializer states, domain objects, capabilites, and lists thereof.
            If necessary, it will perform a deep copy.
            </summary>
            <param name="slot">If this state describes a struct: Index into this struct's pointer table. 
            If this state describes a list of pointers: List element index.</param>
            <param name="obj">Object to be linked. Must be one of the following:<list type="bullet">
            <item><description>Another <see cref="T:Capnp.SerializerState"/></description></item>
            <item><description>A <see cref="T:Capnp.DeserializerState"/> (will always deep copy)</description></item>
            <item><description>An object implementing <see cref="T:Capnp.ICapnpSerializable"/></description></item>
            <item><description>A low-level capability object (<see cref="T:Capnp.Rpc.ConsumedCapability"/>)</description></item>
            <item><description>A proxy object (<see cref="T:Capnp.Rpc.Proxy"/>)</description></item>
            <item><description>A skeleton object (<see cref="T:Capnp.Rpc.Skeleton"/>)</description></item>
            <item><description>A capability interface implementation</description></item>
            <item><description>A <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of one of the things listed here.</description></item>
            </list></param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="slot"/> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException"><list type="bullet">
            <item><description>This state does neither describe a struct, nor a list of pointers</description></item>
            <item><description>Another state is already linked to the specified position (sorry, no overwrite allowed)</description></item></list>
            </exception>
        </member>
        <member name="M:Capnp.SerializerState.ReadCap``1(System.Int32)">
            <summary>
            Reads a struct field as capability and returns a proxy to that capability. 
            </summary>
            <typeparam name="T">Desired capability interface</typeparam>
            <param name="slot">Index into this struct's pointer table.</param>
            <returns>The proxy instance</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="slot"/> is out of range.</exception>
            <exception cref="T:System.ArgumentException">The desired interface does not qualify as capability interface (<see cref="T:Capnp.Rpc.ProxyAttribute"/>)</exception>
            <exception cref="T:System.InvalidOperationException">This state does not represent a struct.</exception>
        </member>
        <member name="M:Capnp.SerializerState.ReadCap(System.Int32)">
            <summary>
            Reads a struct field as capability and returns a bare (generic) proxy to that capability. 
            </summary>
            <param name="slot">Index into this struct's pointer table.</param>
            <returns>The proxy instance</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="slot"/> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">This state does not represent a struct.</exception>
        </member>
        <member name="T:Capnp.TypeIdAttribute">
            <summary>
            Annotates an enum, class or interface with its schema type identifier.
            </summary>
        </member>
        <member name="M:Capnp.TypeIdAttribute.#ctor(System.UInt64)">
            <summary>
            Constructs this attribute.
            </summary>
            <param name="typeId">The 64-bit type identifier from the schema file.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="typeId"/> is zero.</exception>
        </member>
        <member name="P:Capnp.TypeIdAttribute.Id">
            <summary>
            The schema type identifier.
            </summary>
        </member>
        <member name="M:Capnp.UtilityExtensions.ReplacementTryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            This method exists until NET Standard 2.1 is released
            </summary>
            <param name="thisDict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Capnp.UtilityExtensions.ReplacementTryRemove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            This method exists until NET Standard 2.1 is released
            </summary>
            <param name="thisDict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Capnp.UtilityExtensions.ReplacementTaskIsCompletedSuccessfully(System.Threading.Tasks.Task)">
            <summary>
            This method exists until NET Standard 2.1 is released
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="T:Capnp.WireFrame">
            <summary>
            Represents a Cap'n Proto message. Actually a lightweight wrapper struct around a read-only list of memory segments.
            </summary>
        </member>
        <member name="F:Capnp.WireFrame.Segments">
            <summary>
            The message segments
            </summary>
        </member>
        <member name="M:Capnp.WireFrame.#ctor(System.Collections.Generic.IReadOnlyList{System.Memory{System.UInt64}})">
            <summary>
            Constructs a message from a list of segments.
            </summary>
        </member>
        <member name="T:Capnp.PointerKind">
            <summary>
            Pointer tag, see https://capnproto.org/encoding.html/>
            </summary>
        </member>
        <member name="F:Capnp.PointerKind.Struct">
            <summary>
            Struct pointer
            </summary>
        </member>
        <member name="F:Capnp.PointerKind.List">
            <summary>
            List pointer
            </summary>
        </member>
        <member name="F:Capnp.PointerKind.Far">
            <summary>
            Far pointer
            </summary>
        </member>
        <member name="F:Capnp.PointerKind.Other">
            <summary>
            Other (capability) pointer
            </summary>
        </member>
        <member name="T:Capnp.WirePointer">
            <summary>
            Lightweight wrapper struct around a Cap'n Proto pointer. Useful for both encoding and decoding pointers.
            </summary>
        </member>
        <member name="M:Capnp.WirePointer.#ctor(System.UInt64)">
            <summary>
            Constructs this struct from pointer raw data
            </summary>
        </member>
        <member name="M:Capnp.WirePointer.op_Implicit(System.UInt64)~Capnp.WirePointer">
            <summary>
            Interprets any ulong value as Cap'n Proto pointer
            </summary>
        </member>
        <member name="M:Capnp.WirePointer.op_Implicit(Capnp.WirePointer)~System.UInt64">
            <summary>
            Extracts the wire data from the pointer.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.Kind">
            <summary>
            Pointer tag "A"
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.IsNull">
            <summary>
            Returns true iff this is a null pointer.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.Offset">
            <summary>
            The Offset (field "B") for struct and list pointers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown by setter if encoded value would require more than 30 bits</exception>
        </member>
        <member name="P:Capnp.WirePointer.LandingPadOffset">
            <summary>
            Returns the landing pad offset (field "C") for inter-segment pointers.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.StructDataCount">
            <summary>
            Returns the size of the struct's data section (field "C"), in words, for struct pointers.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.StructPtrCount">
            <summary>
            Returns the size of the struct's pointer section (field "D"), in words, for struct pointers.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.StructSize">
            <summary>
            Convenience getter which returns the sum of the struct's pointer and data section sizes.
            </summary>
        </member>
        <member name="M:Capnp.WirePointer.BeginStruct(System.UInt16,System.UInt16)">
            <summary>
            Begins encoding a struct pointer.
            </summary>
            <param name="dataCount">the size of the struct's data section, in words</param>
            <param name="ptrCount">the size of the struct's pointer section, in words</param>
        </member>
        <member name="P:Capnp.WirePointer.ListKind">
            <summary>
            Returns the list "size" (field "C") for list pointers.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.ListOfStructsElementCount">
            <summary>
            Gets or sets the element count if this pointer represents a list of fixed-width composite values.
            </summary>
            <exception cref="T:System.OverflowException">negative value, or encoded value would require more than 30 bits</exception>
        </member>
        <member name="P:Capnp.WirePointer.ListElementCount">
            <summary>
            Returns the element count if this pointer represents a list of anything, except fixed-width composite values.
            </summary>
        </member>
        <member name="M:Capnp.WirePointer.BeginList(Capnp.ListKind,System.Int32)">
            <summary>
            Begins encoding a list pointer
            </summary>
            <param name="kind">element "size" (field "C")</param>
            <param name="count">element count</param>
            <exception cref="T:System.ArgumentOutOfRangeException">element count would require more than 29 bits</exception>
        </member>
        <member name="P:Capnp.WirePointer.TargetSegmentIndex">
            <summary>
            Returns the target segment index (field "D") for inter-segment pointers.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.IsDoubleFar">
            <summary>
            Whether the landing pad is two words (field "B") for inter-segment pointers.
            </summary>
        </member>
        <member name="M:Capnp.WirePointer.SetFarPointer(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Encodes an inter-segment pointer.
            </summary>
            <param name="targetSegmentIndex">target segment index</param>
            <param name="landingPadOffset">landing pad offset</param>
            <param name="isDoubleFar">whether the landing pad is two words</param>
            <exception cref="T:System.ArgumentOutOfRangeException">negative landing pad offset, or encoding would require more than 29 bits</exception>
        </member>
        <member name="P:Capnp.WirePointer.OtherPointerKind">
            <summary>
            Returns the sub-kind of pointer (field "B") if this is an "other" pointer.
            Currently, only 0 is specified, which is a capability pointer.
            </summary>
        </member>
        <member name="P:Capnp.WirePointer.CapabilityIndex">
            <summary>
            Returns the capability index (field "C") if this is a capability pointer.
            </summary>
        </member>
        <member name="M:Capnp.WirePointer.SetCapability(System.UInt32)">
            <summary>
            Encodes a capability pointer.
            </summary>
            <param name="index">capability index</param>
        </member>
    </members>
</doc>
