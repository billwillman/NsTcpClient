// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: json-test.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <capnp/compat/json.capnp.h>

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a814a516cf478f04);
CAPNP_DECLARE_SCHEMA(cd1d3f60a8329bd7);
CAPNP_DECLARE_SCHEMA(b1ab3fe4bda5ee7e);
CAPNP_DECLARE_SCHEMA(c38a3e0c71fe8c94);
CAPNP_DECLARE_SCHEMA(9656fb48c498d4a9);
CAPNP_DECLARE_SCHEMA(d15954173560e3dd);
CAPNP_DECLARE_SCHEMA(c487ce8c1fe240ea);
CAPNP_DECLARE_SCHEMA(91353a71e1346184);
CAPNP_DECLARE_SCHEMA(8c7ea4c9cee71c10);
CAPNP_DECLARE_SCHEMA(f2a3a48ceabe6487);
CAPNP_DECLARE_SCHEMA(d7473bbe49907033);
CAPNP_DECLARE_SCHEMA(af1f270c3f98624e);
CAPNP_DECLARE_SCHEMA(caeebc41035639a4);
CAPNP_DECLARE_SCHEMA(f726f6fa6b58143c);
CAPNP_DECLARE_SCHEMA(d5533065ce7c825f);
CAPNP_DECLARE_SCHEMA(b1cc94eb5141adf8);
CAPNP_DECLARE_SCHEMA(eca76f3df6b22dbb);
enum class TestJsonAnnotatedEnum_eca76f3df6b22dbb: uint16_t {
  FOO,
  BAR,
  BAZ,
  QUX,
};
CAPNP_DECLARE_ENUM(TestJsonAnnotatedEnum, eca76f3df6b22dbb);
CAPNP_DECLARE_SCHEMA(e36a2dc2a7ba9f0a);

}  // namespace schemas
}  // namespace capnp

namespace capnp {

struct TestJsonAnnotations {
  TestJsonAnnotations() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct AGroup;
  struct PrefixedGroup;
  struct AUnion;
  struct SimpleGroup;
  struct BUnion;
  struct UnionWithVoid;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a814a516cf478f04, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::AGroup {
  AGroup() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct FlatBaz;
  struct DoubleFlat;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd1d3f60a8329bd7, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::AGroup::FlatBaz {
  FlatBaz() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1ab3fe4bda5ee7e, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::AGroup::DoubleFlat {
  DoubleFlat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c38a3e0c71fe8c94, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::PrefixedGroup {
  PrefixedGroup() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Baz;
  struct MorePrefix;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9656fb48c498d4a9, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::PrefixedGroup::Baz {
  Baz() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d15954173560e3dd, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::PrefixedGroup::MorePrefix {
  MorePrefix() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c487ce8c1fe240ea, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::AUnion {
  AUnion() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    FOO,
    BAR,
  };
  struct Foo;
  struct Bar;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91353a71e1346184, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::AUnion::Foo {
  Foo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c7ea4c9cee71c10, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::AUnion::Bar {
  Bar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2a3a48ceabe6487, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::SimpleGroup {
  SimpleGroup() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7473bbe49907033, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::BUnion {
  BUnion() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    FOO,
    BAR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af1f270c3f98624e, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations::UnionWithVoid {
  UnionWithVoid() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INT_VALUE,
    VOID_VALUE,
    TEXT_VALUE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(caeebc41035639a4, 4, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations2 {
  TestJsonAnnotations2() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f726f6fa6b58143c, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestJsonAnnotations3 {
  TestJsonAnnotations3() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    FOO,
    BAR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5533065ce7c825f, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestFlattenedStruct {
  TestFlattenedStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1cc94eb5141adf8, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::TestJsonAnnotatedEnum_eca76f3df6b22dbb TestJsonAnnotatedEnum;

struct TestBase64Union {
  TestBase64Union() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    FOO,
    BAR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e36a2dc2a7ba9f0a, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TestJsonAnnotations::Reader {
public:
  typedef TestJsonAnnotations Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSomeField() const;
  inline  ::capnp::Text::Reader getSomeField() const;

  inline typename AGroup::Reader getAGroup() const;

  inline typename PrefixedGroup::Reader getPrefixedGroup() const;

  inline typename AUnion::Reader getAUnion() const;

  inline bool hasDependency() const;
  inline  ::capnp::TestJsonAnnotations2::Reader getDependency() const;

  inline typename SimpleGroup::Reader getSimpleGroup() const;

  inline bool hasEnums() const;
  inline  ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Reader getEnums() const;

  inline bool hasInnerJson() const;
  inline  ::capnp::json::Value::Reader getInnerJson() const;

  inline bool hasCustomFieldHandler() const;
  inline  ::capnp::Text::Reader getCustomFieldHandler() const;

  inline bool hasTestBase64() const;
  inline  ::capnp::Data::Reader getTestBase64() const;

  inline bool hasTestHex() const;
  inline  ::capnp::Data::Reader getTestHex() const;

  inline typename BUnion::Reader getBUnion() const;

  inline bool hasExternalUnion() const;
  inline  ::capnp::TestJsonAnnotations3::Reader getExternalUnion() const;

  inline typename UnionWithVoid::Reader getUnionWithVoid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::Builder {
public:
  typedef TestJsonAnnotations Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSomeField();
  inline  ::capnp::Text::Builder getSomeField();
  inline void setSomeField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSomeField(unsigned int size);
  inline void adoptSomeField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSomeField();

  inline typename AGroup::Builder getAGroup();
  inline typename AGroup::Builder initAGroup();

  inline typename PrefixedGroup::Builder getPrefixedGroup();
  inline typename PrefixedGroup::Builder initPrefixedGroup();

  inline typename AUnion::Builder getAUnion();
  inline typename AUnion::Builder initAUnion();

  inline bool hasDependency();
  inline  ::capnp::TestJsonAnnotations2::Builder getDependency();
  inline void setDependency( ::capnp::TestJsonAnnotations2::Reader value);
  inline  ::capnp::TestJsonAnnotations2::Builder initDependency();
  inline void adoptDependency(::capnp::Orphan< ::capnp::TestJsonAnnotations2>&& value);
  inline ::capnp::Orphan< ::capnp::TestJsonAnnotations2> disownDependency();

  inline typename SimpleGroup::Builder getSimpleGroup();
  inline typename SimpleGroup::Builder initSimpleGroup();

  inline bool hasEnums();
  inline  ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Builder getEnums();
  inline void setEnums( ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Reader value);
  inline void setEnums(::kj::ArrayPtr<const  ::capnp::TestJsonAnnotatedEnum> value);
  inline  ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Builder initEnums(unsigned int size);
  inline void adoptEnums(::capnp::Orphan< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>> disownEnums();

  inline bool hasInnerJson();
  inline  ::capnp::json::Value::Builder getInnerJson();
  inline void setInnerJson( ::capnp::json::Value::Reader value);
  inline  ::capnp::json::Value::Builder initInnerJson();
  inline void adoptInnerJson(::capnp::Orphan< ::capnp::json::Value>&& value);
  inline ::capnp::Orphan< ::capnp::json::Value> disownInnerJson();

  inline bool hasCustomFieldHandler();
  inline  ::capnp::Text::Builder getCustomFieldHandler();
  inline void setCustomFieldHandler( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCustomFieldHandler(unsigned int size);
  inline void adoptCustomFieldHandler(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCustomFieldHandler();

  inline bool hasTestBase64();
  inline  ::capnp::Data::Builder getTestBase64();
  inline void setTestBase64( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTestBase64(unsigned int size);
  inline void adoptTestBase64(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTestBase64();

  inline bool hasTestHex();
  inline  ::capnp::Data::Builder getTestHex();
  inline void setTestHex( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTestHex(unsigned int size);
  inline void adoptTestHex(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTestHex();

  inline typename BUnion::Builder getBUnion();
  inline typename BUnion::Builder initBUnion();

  inline bool hasExternalUnion();
  inline  ::capnp::TestJsonAnnotations3::Builder getExternalUnion();
  inline void setExternalUnion( ::capnp::TestJsonAnnotations3::Reader value);
  inline  ::capnp::TestJsonAnnotations3::Builder initExternalUnion();
  inline void adoptExternalUnion(::capnp::Orphan< ::capnp::TestJsonAnnotations3>&& value);
  inline ::capnp::Orphan< ::capnp::TestJsonAnnotations3> disownExternalUnion();

  inline typename UnionWithVoid::Builder getUnionWithVoid();
  inline typename UnionWithVoid::Builder initUnionWithVoid();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::Pipeline {
public:
  typedef TestJsonAnnotations Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename AGroup::Pipeline getAGroup();
  inline typename PrefixedGroup::Pipeline getPrefixedGroup();
  inline typename AUnion::Pipeline getAUnion();
  inline  ::capnp::TestJsonAnnotations2::Pipeline getDependency();
  inline typename SimpleGroup::Pipeline getSimpleGroup();
  inline  ::capnp::json::Value::Pipeline getInnerJson();
  inline typename BUnion::Pipeline getBUnion();
  inline  ::capnp::TestJsonAnnotations3::Pipeline getExternalUnion();
  inline typename UnionWithVoid::Pipeline getUnionWithVoid();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::AGroup::Reader {
public:
  typedef AGroup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlatFoo() const;

  inline bool hasFlatBar() const;
  inline  ::capnp::Text::Reader getFlatBar() const;

  inline typename FlatBaz::Reader getFlatBaz() const;

  inline typename DoubleFlat::Reader getDoubleFlat() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::AGroup::Builder {
public:
  typedef AGroup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlatFoo();
  inline void setFlatFoo( ::uint32_t value);

  inline bool hasFlatBar();
  inline  ::capnp::Text::Builder getFlatBar();
  inline void setFlatBar( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFlatBar(unsigned int size);
  inline void adoptFlatBar(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFlatBar();

  inline typename FlatBaz::Builder getFlatBaz();
  inline typename FlatBaz::Builder initFlatBaz();

  inline typename DoubleFlat::Builder getDoubleFlat();
  inline typename DoubleFlat::Builder initDoubleFlat();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::AGroup::Pipeline {
public:
  typedef AGroup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename FlatBaz::Pipeline getFlatBaz();
  inline typename DoubleFlat::Pipeline getDoubleFlat();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::AGroup::FlatBaz::Reader {
public:
  typedef FlatBaz Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getHello() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::AGroup::FlatBaz::Builder {
public:
  typedef FlatBaz Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getHello();
  inline void setHello(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::AGroup::FlatBaz::Pipeline {
public:
  typedef FlatBaz Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::AGroup::DoubleFlat::Reader {
public:
  typedef DoubleFlat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFlatQux() const;
  inline  ::capnp::Text::Reader getFlatQux() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::AGroup::DoubleFlat::Builder {
public:
  typedef DoubleFlat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFlatQux();
  inline  ::capnp::Text::Builder getFlatQux();
  inline void setFlatQux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFlatQux(unsigned int size);
  inline void adoptFlatQux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFlatQux();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::AGroup::DoubleFlat::Pipeline {
public:
  typedef DoubleFlat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::PrefixedGroup::Reader {
public:
  typedef PrefixedGroup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFoo() const;
  inline  ::capnp::Text::Reader getFoo() const;

  inline  ::uint32_t getBar() const;

  inline typename Baz::Reader getBaz() const;

  inline typename MorePrefix::Reader getMorePrefix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::PrefixedGroup::Builder {
public:
  typedef PrefixedGroup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFoo();
  inline  ::capnp::Text::Builder getFoo();
  inline void setFoo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFoo();

  inline  ::uint32_t getBar();
  inline void setBar( ::uint32_t value);

  inline typename Baz::Builder getBaz();
  inline typename Baz::Builder initBaz();

  inline typename MorePrefix::Builder getMorePrefix();
  inline typename MorePrefix::Builder initMorePrefix();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::PrefixedGroup::Pipeline {
public:
  typedef PrefixedGroup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Baz::Pipeline getBaz();
  inline typename MorePrefix::Pipeline getMorePrefix();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::PrefixedGroup::Baz::Reader {
public:
  typedef Baz Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getHello() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::PrefixedGroup::Baz::Builder {
public:
  typedef Baz Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getHello();
  inline void setHello(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::PrefixedGroup::Baz::Pipeline {
public:
  typedef Baz Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::PrefixedGroup::MorePrefix::Reader {
public:
  typedef MorePrefix Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasQux() const;
  inline  ::capnp::Text::Reader getQux() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder {
public:
  typedef MorePrefix Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasQux();
  inline  ::capnp::Text::Builder getQux();
  inline void setQux( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQux(unsigned int size);
  inline void adoptQux(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQux();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::PrefixedGroup::MorePrefix::Pipeline {
public:
  typedef MorePrefix Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::AUnion::Reader {
public:
  typedef AUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isFoo() const;
  inline typename Foo::Reader getFoo() const;

  inline bool isBar() const;
  inline typename Bar::Reader getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::AUnion::Builder {
public:
  typedef AUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isFoo();
  inline typename Foo::Builder getFoo();
  inline typename Foo::Builder initFoo();

  inline bool isBar();
  inline typename Bar::Builder getBar();
  inline typename Bar::Builder initBar();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::AUnion::Pipeline {
public:
  typedef AUnion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::AUnion::Foo::Reader {
public:
  typedef Foo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFooMember() const;
  inline  ::capnp::Text::Reader getFooMember() const;

  inline  ::uint32_t getMultiMember() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::AUnion::Foo::Builder {
public:
  typedef Foo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFooMember();
  inline  ::capnp::Text::Builder getFooMember();
  inline void setFooMember( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFooMember(unsigned int size);
  inline void adoptFooMember(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFooMember();

  inline  ::uint32_t getMultiMember();
  inline void setMultiMember( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::AUnion::Foo::Pipeline {
public:
  typedef Foo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::AUnion::Bar::Reader {
public:
  typedef Bar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBarMember() const;

  inline bool hasMultiMember() const;
  inline  ::capnp::Text::Reader getMultiMember() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::AUnion::Bar::Builder {
public:
  typedef Bar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBarMember();
  inline void setBarMember( ::uint32_t value);

  inline bool hasMultiMember();
  inline  ::capnp::Text::Builder getMultiMember();
  inline void setMultiMember( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMultiMember(unsigned int size);
  inline void adoptMultiMember(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMultiMember();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::AUnion::Bar::Pipeline {
public:
  typedef Bar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::SimpleGroup::Reader {
public:
  typedef SimpleGroup Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGrault() const;
  inline  ::capnp::Text::Reader getGrault() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::SimpleGroup::Builder {
public:
  typedef SimpleGroup Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGrault();
  inline  ::capnp::Text::Builder getGrault();
  inline void setGrault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrault(unsigned int size);
  inline void adoptGrault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrault();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::SimpleGroup::Pipeline {
public:
  typedef SimpleGroup Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::BUnion::Reader {
public:
  typedef BUnion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isFoo() const;
  inline bool hasFoo() const;
  inline  ::capnp::Text::Reader getFoo() const;

  inline bool isBar() const;
  inline  ::uint32_t getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::BUnion::Builder {
public:
  typedef BUnion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isFoo();
  inline bool hasFoo();
  inline  ::capnp::Text::Builder getFoo();
  inline void setFoo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFoo();

  inline bool isBar();
  inline  ::uint32_t getBar();
  inline void setBar( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::BUnion::Pipeline {
public:
  typedef BUnion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations::UnionWithVoid::Reader {
public:
  typedef UnionWithVoid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isIntValue() const;
  inline  ::uint32_t getIntValue() const;

  inline bool isVoidValue() const;
  inline  ::capnp::Void getVoidValue() const;

  inline bool isTextValue() const;
  inline bool hasTextValue() const;
  inline  ::capnp::Text::Reader getTextValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations::UnionWithVoid::Builder {
public:
  typedef UnionWithVoid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isIntValue();
  inline  ::uint32_t getIntValue();
  inline void setIntValue( ::uint32_t value);

  inline bool isVoidValue();
  inline  ::capnp::Void getVoidValue();
  inline void setVoidValue( ::capnp::Void value = ::capnp::VOID);

  inline bool isTextValue();
  inline bool hasTextValue();
  inline  ::capnp::Text::Builder getTextValue();
  inline void setTextValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTextValue(unsigned int size);
  inline void adoptTextValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTextValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations::UnionWithVoid::Pipeline {
public:
  typedef UnionWithVoid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations2::Reader {
public:
  typedef TestJsonAnnotations2 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFoo() const;
  inline  ::capnp::Text::Reader getFoo() const;

  inline bool hasCycle() const;
  inline  ::capnp::TestJsonAnnotations::Reader getCycle() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations2::Builder {
public:
  typedef TestJsonAnnotations2 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFoo();
  inline  ::capnp::Text::Builder getFoo();
  inline void setFoo( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFoo();

  inline bool hasCycle();
  inline  ::capnp::TestJsonAnnotations::Builder getCycle();
  inline void setCycle( ::capnp::TestJsonAnnotations::Reader value);
  inline  ::capnp::TestJsonAnnotations::Builder initCycle();
  inline void adoptCycle(::capnp::Orphan< ::capnp::TestJsonAnnotations>&& value);
  inline ::capnp::Orphan< ::capnp::TestJsonAnnotations> disownCycle();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations2::Pipeline {
public:
  typedef TestJsonAnnotations2 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::TestJsonAnnotations::Pipeline getCycle();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestJsonAnnotations3::Reader {
public:
  typedef TestJsonAnnotations3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isFoo() const;
  inline  ::uint32_t getFoo() const;

  inline bool isBar() const;
  inline bool hasBar() const;
  inline  ::capnp::TestFlattenedStruct::Reader getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestJsonAnnotations3::Builder {
public:
  typedef TestJsonAnnotations3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isFoo();
  inline  ::uint32_t getFoo();
  inline void setFoo( ::uint32_t value);

  inline bool isBar();
  inline bool hasBar();
  inline  ::capnp::TestFlattenedStruct::Builder getBar();
  inline void setBar( ::capnp::TestFlattenedStruct::Reader value);
  inline  ::capnp::TestFlattenedStruct::Builder initBar();
  inline void adoptBar(::capnp::Orphan< ::capnp::TestFlattenedStruct>&& value);
  inline ::capnp::Orphan< ::capnp::TestFlattenedStruct> disownBar();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestJsonAnnotations3::Pipeline {
public:
  typedef TestJsonAnnotations3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestFlattenedStruct::Reader {
public:
  typedef TestFlattenedStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestFlattenedStruct::Builder {
public:
  typedef TestFlattenedStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestFlattenedStruct::Pipeline {
public:
  typedef TestFlattenedStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestBase64Union::Reader {
public:
  typedef TestBase64Union Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isFoo() const;
  inline bool hasFoo() const;
  inline  ::capnp::Data::Reader getFoo() const;

  inline bool isBar() const;
  inline bool hasBar() const;
  inline  ::capnp::Text::Reader getBar() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestBase64Union::Builder {
public:
  typedef TestBase64Union Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isFoo();
  inline bool hasFoo();
  inline  ::capnp::Data::Builder getFoo();
  inline void setFoo( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initFoo(unsigned int size);
  inline void adoptFoo(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownFoo();

  inline bool isBar();
  inline bool hasBar();
  inline  ::capnp::Text::Builder getBar();
  inline void setBar( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBar(unsigned int size);
  inline void adoptBar(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBar();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestBase64Union::Pipeline {
public:
  typedef TestBase64Union Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool TestJsonAnnotations::Reader::hasSomeField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasSomeField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::Reader::getSomeField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::Builder::getSomeField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::setSomeField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::Builder::initSomeField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::Builder::adoptSomeField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::Builder::disownSomeField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename TestJsonAnnotations::AGroup::Reader TestJsonAnnotations::Reader::getAGroup() const {
  return typename TestJsonAnnotations::AGroup::Reader(_reader);
}
inline typename TestJsonAnnotations::AGroup::Builder TestJsonAnnotations::Builder::getAGroup() {
  return typename TestJsonAnnotations::AGroup::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::AGroup::Pipeline TestJsonAnnotations::Pipeline::getAGroup() {
  return typename TestJsonAnnotations::AGroup::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::AGroup::Builder TestJsonAnnotations::Builder::initAGroup() {
  _builder.setDataField< ::uint32_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<bool>(::capnp::bounded<32>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::AGroup::Builder(_builder);
}
inline typename TestJsonAnnotations::PrefixedGroup::Reader TestJsonAnnotations::Reader::getPrefixedGroup() const {
  return typename TestJsonAnnotations::PrefixedGroup::Reader(_reader);
}
inline typename TestJsonAnnotations::PrefixedGroup::Builder TestJsonAnnotations::Builder::getPrefixedGroup() {
  return typename TestJsonAnnotations::PrefixedGroup::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::PrefixedGroup::Pipeline TestJsonAnnotations::Pipeline::getPrefixedGroup() {
  return typename TestJsonAnnotations::PrefixedGroup::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::PrefixedGroup::Builder TestJsonAnnotations::Builder::initPrefixedGroup() {
  _builder.setDataField<bool>(::capnp::bounded<33>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::PrefixedGroup::Builder(_builder);
}
inline typename TestJsonAnnotations::AUnion::Reader TestJsonAnnotations::Reader::getAUnion() const {
  return typename TestJsonAnnotations::AUnion::Reader(_reader);
}
inline typename TestJsonAnnotations::AUnion::Builder TestJsonAnnotations::Builder::getAUnion() {
  return typename TestJsonAnnotations::AUnion::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::AUnion::Pipeline TestJsonAnnotations::Pipeline::getAUnion() {
  return typename TestJsonAnnotations::AUnion::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::AUnion::Builder TestJsonAnnotations::Builder::initAUnion() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::AUnion::Builder(_builder);
}
inline bool TestJsonAnnotations::Reader::hasDependency() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasDependency() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::TestJsonAnnotations2::Reader TestJsonAnnotations::Reader::getDependency() const {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations2>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::TestJsonAnnotations2::Builder TestJsonAnnotations::Builder::getDependency() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations2>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::TestJsonAnnotations2::Pipeline TestJsonAnnotations::Pipeline::getDependency() {
  return  ::capnp::TestJsonAnnotations2::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void TestJsonAnnotations::Builder::setDependency( ::capnp::TestJsonAnnotations2::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations2>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::TestJsonAnnotations2::Builder TestJsonAnnotations::Builder::initDependency() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations2>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::adoptDependency(
    ::capnp::Orphan< ::capnp::TestJsonAnnotations2>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations2>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::TestJsonAnnotations2> TestJsonAnnotations::Builder::disownDependency() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations2>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline typename TestJsonAnnotations::SimpleGroup::Reader TestJsonAnnotations::Reader::getSimpleGroup() const {
  return typename TestJsonAnnotations::SimpleGroup::Reader(_reader);
}
inline typename TestJsonAnnotations::SimpleGroup::Builder TestJsonAnnotations::Builder::getSimpleGroup() {
  return typename TestJsonAnnotations::SimpleGroup::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::SimpleGroup::Pipeline TestJsonAnnotations::Pipeline::getSimpleGroup() {
  return typename TestJsonAnnotations::SimpleGroup::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::SimpleGroup::Builder TestJsonAnnotations::Builder::initSimpleGroup() {
  _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::SimpleGroup::Builder(_builder);
}
inline bool TestJsonAnnotations::Reader::hasEnums() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasEnums() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Reader TestJsonAnnotations::Reader::getEnums() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Builder TestJsonAnnotations::Builder::getEnums() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::setEnums( ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void TestJsonAnnotations::Builder::setEnums(::kj::ArrayPtr<const  ::capnp::TestJsonAnnotatedEnum> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>::Builder TestJsonAnnotations::Builder::initEnums(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::Builder::adoptEnums(
    ::capnp::Orphan< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>> TestJsonAnnotations::Builder::disownEnums() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::TestJsonAnnotatedEnum,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations::Reader::hasInnerJson() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasInnerJson() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::json::Value::Reader TestJsonAnnotations::Reader::getInnerJson() const {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::json::Value::Builder TestJsonAnnotations::Builder::getInnerJson() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::json::Value::Pipeline TestJsonAnnotations::Pipeline::getInnerJson() {
  return  ::capnp::json::Value::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void TestJsonAnnotations::Builder::setInnerJson( ::capnp::json::Value::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::json::Value::Builder TestJsonAnnotations::Builder::initInnerJson() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::adoptInnerJson(
    ::capnp::Orphan< ::capnp::json::Value>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::json::Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::json::Value> TestJsonAnnotations::Builder::disownInnerJson() {
  return ::capnp::_::PointerHelpers< ::capnp::json::Value>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations::Reader::hasCustomFieldHandler() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasCustomFieldHandler() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::Reader::getCustomFieldHandler() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::Builder::getCustomFieldHandler() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::setCustomFieldHandler( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::Builder::initCustomFieldHandler(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::Builder::adoptCustomFieldHandler(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::Builder::disownCustomFieldHandler() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations::Reader::hasTestBase64() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasTestBase64() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TestJsonAnnotations::Reader::getTestBase64() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TestJsonAnnotations::Builder::getTestBase64() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::setTestBase64( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TestJsonAnnotations::Builder::initTestBase64(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::Builder::adoptTestBase64(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestJsonAnnotations::Builder::disownTestBase64() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations::Reader::hasTestHex() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasTestHex() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TestJsonAnnotations::Reader::getTestHex() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TestJsonAnnotations::Builder::getTestHex() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::setTestHex( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TestJsonAnnotations::Builder::initTestHex(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::Builder::adoptTestHex(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestJsonAnnotations::Builder::disownTestHex() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline typename TestJsonAnnotations::BUnion::Reader TestJsonAnnotations::Reader::getBUnion() const {
  return typename TestJsonAnnotations::BUnion::Reader(_reader);
}
inline typename TestJsonAnnotations::BUnion::Builder TestJsonAnnotations::Builder::getBUnion() {
  return typename TestJsonAnnotations::BUnion::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::BUnion::Pipeline TestJsonAnnotations::Pipeline::getBUnion() {
  return typename TestJsonAnnotations::BUnion::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::BUnion::Builder TestJsonAnnotations::Builder::initBUnion() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<8>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<5>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::BUnion::Builder(_builder);
}
inline bool TestJsonAnnotations::Reader::hasExternalUnion() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::Builder::hasExternalUnion() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::TestJsonAnnotations3::Reader TestJsonAnnotations::Reader::getExternalUnion() const {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations3>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::TestJsonAnnotations3::Builder TestJsonAnnotations::Builder::getExternalUnion() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations3>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::TestJsonAnnotations3::Pipeline TestJsonAnnotations::Pipeline::getExternalUnion() {
  return  ::capnp::TestJsonAnnotations3::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void TestJsonAnnotations::Builder::setExternalUnion( ::capnp::TestJsonAnnotations3::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations3>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::TestJsonAnnotations3::Builder TestJsonAnnotations::Builder::initExternalUnion() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations3>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::Builder::adoptExternalUnion(
    ::capnp::Orphan< ::capnp::TestJsonAnnotations3>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations3>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::TestJsonAnnotations3> TestJsonAnnotations::Builder::disownExternalUnion() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations3>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline typename TestJsonAnnotations::UnionWithVoid::Reader TestJsonAnnotations::Reader::getUnionWithVoid() const {
  return typename TestJsonAnnotations::UnionWithVoid::Reader(_reader);
}
inline typename TestJsonAnnotations::UnionWithVoid::Builder TestJsonAnnotations::Builder::getUnionWithVoid() {
  return typename TestJsonAnnotations::UnionWithVoid::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::UnionWithVoid::Pipeline TestJsonAnnotations::Pipeline::getUnionWithVoid() {
  return typename TestJsonAnnotations::UnionWithVoid::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::UnionWithVoid::Builder TestJsonAnnotations::Builder::initUnionWithVoid() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<9>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<6>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<15>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::UnionWithVoid::Builder(_builder);
}
inline  ::uint32_t TestJsonAnnotations::AGroup::Reader::getFlatFoo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestJsonAnnotations::AGroup::Builder::getFlatFoo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::AGroup::Builder::setFlatFoo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TestJsonAnnotations::AGroup::Reader::hasFlatBar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::AGroup::Builder::hasFlatBar() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::AGroup::Reader::getFlatBar() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AGroup::Builder::getFlatBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::AGroup::Builder::setFlatBar( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AGroup::Builder::initFlatBar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::AGroup::Builder::adoptFlatBar(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::AGroup::Builder::disownFlatBar() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename TestJsonAnnotations::AGroup::FlatBaz::Reader TestJsonAnnotations::AGroup::Reader::getFlatBaz() const {
  return typename TestJsonAnnotations::AGroup::FlatBaz::Reader(_reader);
}
inline typename TestJsonAnnotations::AGroup::FlatBaz::Builder TestJsonAnnotations::AGroup::Builder::getFlatBaz() {
  return typename TestJsonAnnotations::AGroup::FlatBaz::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::AGroup::FlatBaz::Pipeline TestJsonAnnotations::AGroup::Pipeline::getFlatBaz() {
  return typename TestJsonAnnotations::AGroup::FlatBaz::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::AGroup::FlatBaz::Builder TestJsonAnnotations::AGroup::Builder::initFlatBaz() {
  _builder.setDataField<bool>(::capnp::bounded<32>() * ::capnp::ELEMENTS, 0);
  return typename TestJsonAnnotations::AGroup::FlatBaz::Builder(_builder);
}
inline typename TestJsonAnnotations::AGroup::DoubleFlat::Reader TestJsonAnnotations::AGroup::Reader::getDoubleFlat() const {
  return typename TestJsonAnnotations::AGroup::DoubleFlat::Reader(_reader);
}
inline typename TestJsonAnnotations::AGroup::DoubleFlat::Builder TestJsonAnnotations::AGroup::Builder::getDoubleFlat() {
  return typename TestJsonAnnotations::AGroup::DoubleFlat::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::AGroup::DoubleFlat::Pipeline TestJsonAnnotations::AGroup::Pipeline::getDoubleFlat() {
  return typename TestJsonAnnotations::AGroup::DoubleFlat::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::AGroup::DoubleFlat::Builder TestJsonAnnotations::AGroup::Builder::initDoubleFlat() {
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::AGroup::DoubleFlat::Builder(_builder);
}
inline bool TestJsonAnnotations::AGroup::FlatBaz::Reader::getHello() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool TestJsonAnnotations::AGroup::FlatBaz::Builder::getHello() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::AGroup::FlatBaz::Builder::setHello(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool TestJsonAnnotations::AGroup::DoubleFlat::Reader::hasFlatQux() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::AGroup::DoubleFlat::Builder::hasFlatQux() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::AGroup::DoubleFlat::Reader::getFlatQux() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AGroup::DoubleFlat::Builder::getFlatQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::AGroup::DoubleFlat::Builder::setFlatQux( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AGroup::DoubleFlat::Builder::initFlatQux(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::AGroup::DoubleFlat::Builder::adoptFlatQux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::AGroup::DoubleFlat::Builder::disownFlatQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations::PrefixedGroup::Reader::hasFoo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::PrefixedGroup::Builder::hasFoo() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::PrefixedGroup::Reader::getFoo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::PrefixedGroup::Builder::getFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::PrefixedGroup::Builder::setFoo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::PrefixedGroup::Builder::initFoo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::PrefixedGroup::Builder::adoptFoo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::PrefixedGroup::Builder::disownFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t TestJsonAnnotations::PrefixedGroup::Reader::getBar() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestJsonAnnotations::PrefixedGroup::Builder::getBar() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::PrefixedGroup::Builder::setBar( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline typename TestJsonAnnotations::PrefixedGroup::Baz::Reader TestJsonAnnotations::PrefixedGroup::Reader::getBaz() const {
  return typename TestJsonAnnotations::PrefixedGroup::Baz::Reader(_reader);
}
inline typename TestJsonAnnotations::PrefixedGroup::Baz::Builder TestJsonAnnotations::PrefixedGroup::Builder::getBaz() {
  return typename TestJsonAnnotations::PrefixedGroup::Baz::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::PrefixedGroup::Baz::Pipeline TestJsonAnnotations::PrefixedGroup::Pipeline::getBaz() {
  return typename TestJsonAnnotations::PrefixedGroup::Baz::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::PrefixedGroup::Baz::Builder TestJsonAnnotations::PrefixedGroup::Builder::initBaz() {
  _builder.setDataField<bool>(::capnp::bounded<33>() * ::capnp::ELEMENTS, 0);
  return typename TestJsonAnnotations::PrefixedGroup::Baz::Builder(_builder);
}
inline typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Reader TestJsonAnnotations::PrefixedGroup::Reader::getMorePrefix() const {
  return typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Reader(_reader);
}
inline typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder TestJsonAnnotations::PrefixedGroup::Builder::getMorePrefix() {
  return typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Pipeline TestJsonAnnotations::PrefixedGroup::Pipeline::getMorePrefix() {
  return typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder TestJsonAnnotations::PrefixedGroup::Builder::initMorePrefix() {
  _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder(_builder);
}
inline bool TestJsonAnnotations::PrefixedGroup::Baz::Reader::getHello() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool TestJsonAnnotations::PrefixedGroup::Baz::Builder::getHello() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::PrefixedGroup::Baz::Builder::setHello(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool TestJsonAnnotations::PrefixedGroup::MorePrefix::Reader::hasQux() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder::hasQux() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::PrefixedGroup::MorePrefix::Reader::getQux() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder::getQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder::setQux( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder::initQux(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder::adoptQux(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::PrefixedGroup::MorePrefix::Builder::disownQux() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::capnp::TestJsonAnnotations::AUnion::Which TestJsonAnnotations::AUnion::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline  ::capnp::TestJsonAnnotations::AUnion::Which TestJsonAnnotations::AUnion::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool TestJsonAnnotations::AUnion::Reader::isFoo() const {
  return which() == TestJsonAnnotations::AUnion::FOO;
}
inline bool TestJsonAnnotations::AUnion::Builder::isFoo() {
  return which() == TestJsonAnnotations::AUnion::FOO;
}
inline typename TestJsonAnnotations::AUnion::Foo::Reader TestJsonAnnotations::AUnion::Reader::getFoo() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations::AUnion::FOO),
              "Must check which() before get()ing a union member.");
  return typename TestJsonAnnotations::AUnion::Foo::Reader(_reader);
}
inline typename TestJsonAnnotations::AUnion::Foo::Builder TestJsonAnnotations::AUnion::Builder::getFoo() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::AUnion::FOO),
              "Must check which() before get()ing a union member.");
  return typename TestJsonAnnotations::AUnion::Foo::Builder(_builder);
}
inline typename TestJsonAnnotations::AUnion::Foo::Builder TestJsonAnnotations::AUnion::Builder::initFoo() {
  _builder.setDataField<TestJsonAnnotations::AUnion::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, TestJsonAnnotations::AUnion::FOO);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::AUnion::Foo::Builder(_builder);
}
inline bool TestJsonAnnotations::AUnion::Reader::isBar() const {
  return which() == TestJsonAnnotations::AUnion::BAR;
}
inline bool TestJsonAnnotations::AUnion::Builder::isBar() {
  return which() == TestJsonAnnotations::AUnion::BAR;
}
inline typename TestJsonAnnotations::AUnion::Bar::Reader TestJsonAnnotations::AUnion::Reader::getBar() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations::AUnion::BAR),
              "Must check which() before get()ing a union member.");
  return typename TestJsonAnnotations::AUnion::Bar::Reader(_reader);
}
inline typename TestJsonAnnotations::AUnion::Bar::Builder TestJsonAnnotations::AUnion::Builder::getBar() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::AUnion::BAR),
              "Must check which() before get()ing a union member.");
  return typename TestJsonAnnotations::AUnion::Bar::Builder(_builder);
}
inline typename TestJsonAnnotations::AUnion::Bar::Builder TestJsonAnnotations::AUnion::Builder::initBar() {
  _builder.setDataField<TestJsonAnnotations::AUnion::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, TestJsonAnnotations::AUnion::BAR);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS).clear();
  return typename TestJsonAnnotations::AUnion::Bar::Builder(_builder);
}
inline bool TestJsonAnnotations::AUnion::Foo::Reader::hasFooMember() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::AUnion::Foo::Builder::hasFooMember() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::AUnion::Foo::Reader::getFooMember() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AUnion::Foo::Builder::getFooMember() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::AUnion::Foo::Builder::setFooMember( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AUnion::Foo::Builder::initFooMember(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::AUnion::Foo::Builder::adoptFooMember(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::AUnion::Foo::Builder::disownFooMember() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint32_t TestJsonAnnotations::AUnion::Foo::Reader::getMultiMember() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestJsonAnnotations::AUnion::Foo::Builder::getMultiMember() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::AUnion::Foo::Builder::setMultiMember( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TestJsonAnnotations::AUnion::Bar::Reader::getBarMember() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestJsonAnnotations::AUnion::Bar::Builder::getBarMember() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::AUnion::Bar::Builder::setBarMember( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TestJsonAnnotations::AUnion::Bar::Reader::hasMultiMember() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::AUnion::Bar::Builder::hasMultiMember() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::AUnion::Bar::Reader::getMultiMember() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AUnion::Bar::Builder::getMultiMember() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::AUnion::Bar::Builder::setMultiMember( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::AUnion::Bar::Builder::initMultiMember(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::AUnion::Bar::Builder::adoptMultiMember(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::AUnion::Bar::Builder::disownMultiMember() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations::SimpleGroup::Reader::hasGrault() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::SimpleGroup::Builder::hasGrault() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::SimpleGroup::Reader::getGrault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::SimpleGroup::Builder::getGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::SimpleGroup::Builder::setGrault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::SimpleGroup::Builder::initGrault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::SimpleGroup::Builder::adoptGrault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::SimpleGroup::Builder::disownGrault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::capnp::TestJsonAnnotations::BUnion::Which TestJsonAnnotations::BUnion::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline  ::capnp::TestJsonAnnotations::BUnion::Which TestJsonAnnotations::BUnion::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool TestJsonAnnotations::BUnion::Reader::isFoo() const {
  return which() == TestJsonAnnotations::BUnion::FOO;
}
inline bool TestJsonAnnotations::BUnion::Builder::isFoo() {
  return which() == TestJsonAnnotations::BUnion::FOO;
}
inline bool TestJsonAnnotations::BUnion::Reader::hasFoo() const {
  if (which() != TestJsonAnnotations::BUnion::FOO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::BUnion::Builder::hasFoo() {
  if (which() != TestJsonAnnotations::BUnion::FOO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::BUnion::Reader::getFoo() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations::BUnion::FOO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::BUnion::Builder::getFoo() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::BUnion::FOO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::BUnion::Builder::setFoo( ::capnp::Text::Reader value) {
  _builder.setDataField<TestJsonAnnotations::BUnion::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, TestJsonAnnotations::BUnion::FOO);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::BUnion::Builder::initFoo(unsigned int size) {
  _builder.setDataField<TestJsonAnnotations::BUnion::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, TestJsonAnnotations::BUnion::FOO);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::BUnion::Builder::adoptFoo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestJsonAnnotations::BUnion::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, TestJsonAnnotations::BUnion::FOO);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::BUnion::Builder::disownFoo() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::BUnion::FOO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations::BUnion::Reader::isBar() const {
  return which() == TestJsonAnnotations::BUnion::BAR;
}
inline bool TestJsonAnnotations::BUnion::Builder::isBar() {
  return which() == TestJsonAnnotations::BUnion::BAR;
}
inline  ::uint32_t TestJsonAnnotations::BUnion::Reader::getBar() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations::BUnion::BAR),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestJsonAnnotations::BUnion::Builder::getBar() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::BUnion::BAR),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::BUnion::Builder::setBar( ::uint32_t value) {
  _builder.setDataField<TestJsonAnnotations::BUnion::Which>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, TestJsonAnnotations::BUnion::BAR);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::TestJsonAnnotations::UnionWithVoid::Which TestJsonAnnotations::UnionWithVoid::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline  ::capnp::TestJsonAnnotations::UnionWithVoid::Which TestJsonAnnotations::UnionWithVoid::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool TestJsonAnnotations::UnionWithVoid::Reader::isIntValue() const {
  return which() == TestJsonAnnotations::UnionWithVoid::INT_VALUE;
}
inline bool TestJsonAnnotations::UnionWithVoid::Builder::isIntValue() {
  return which() == TestJsonAnnotations::UnionWithVoid::INT_VALUE;
}
inline  ::uint32_t TestJsonAnnotations::UnionWithVoid::Reader::getIntValue() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations::UnionWithVoid::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestJsonAnnotations::UnionWithVoid::Builder::getIntValue() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::UnionWithVoid::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::UnionWithVoid::Builder::setIntValue( ::uint32_t value) {
  _builder.setDataField<TestJsonAnnotations::UnionWithVoid::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestJsonAnnotations::UnionWithVoid::INT_VALUE);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool TestJsonAnnotations::UnionWithVoid::Reader::isVoidValue() const {
  return which() == TestJsonAnnotations::UnionWithVoid::VOID_VALUE;
}
inline bool TestJsonAnnotations::UnionWithVoid::Builder::isVoidValue() {
  return which() == TestJsonAnnotations::UnionWithVoid::VOID_VALUE;
}
inline  ::capnp::Void TestJsonAnnotations::UnionWithVoid::Reader::getVoidValue() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations::UnionWithVoid::VOID_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestJsonAnnotations::UnionWithVoid::Builder::getVoidValue() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::UnionWithVoid::VOID_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations::UnionWithVoid::Builder::setVoidValue( ::capnp::Void value) {
  _builder.setDataField<TestJsonAnnotations::UnionWithVoid::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestJsonAnnotations::UnionWithVoid::VOID_VALUE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TestJsonAnnotations::UnionWithVoid::Reader::isTextValue() const {
  return which() == TestJsonAnnotations::UnionWithVoid::TEXT_VALUE;
}
inline bool TestJsonAnnotations::UnionWithVoid::Builder::isTextValue() {
  return which() == TestJsonAnnotations::UnionWithVoid::TEXT_VALUE;
}
inline bool TestJsonAnnotations::UnionWithVoid::Reader::hasTextValue() const {
  if (which() != TestJsonAnnotations::UnionWithVoid::TEXT_VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations::UnionWithVoid::Builder::hasTextValue() {
  if (which() != TestJsonAnnotations::UnionWithVoid::TEXT_VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations::UnionWithVoid::Reader::getTextValue() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations::UnionWithVoid::TEXT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations::UnionWithVoid::Builder::getTextValue() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::UnionWithVoid::TEXT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations::UnionWithVoid::Builder::setTextValue( ::capnp::Text::Reader value) {
  _builder.setDataField<TestJsonAnnotations::UnionWithVoid::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestJsonAnnotations::UnionWithVoid::TEXT_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations::UnionWithVoid::Builder::initTextValue(unsigned int size) {
  _builder.setDataField<TestJsonAnnotations::UnionWithVoid::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestJsonAnnotations::UnionWithVoid::TEXT_VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations::UnionWithVoid::Builder::adoptTextValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestJsonAnnotations::UnionWithVoid::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestJsonAnnotations::UnionWithVoid::TEXT_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations::UnionWithVoid::Builder::disownTextValue() {
  KJ_IREQUIRE((which() == TestJsonAnnotations::UnionWithVoid::TEXT_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations2::Reader::hasFoo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations2::Builder::hasFoo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestJsonAnnotations2::Reader::getFoo() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestJsonAnnotations2::Builder::getFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations2::Builder::setFoo( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestJsonAnnotations2::Builder::initFoo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestJsonAnnotations2::Builder::adoptFoo(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestJsonAnnotations2::Builder::disownFoo() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TestJsonAnnotations2::Reader::hasCycle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations2::Builder::hasCycle() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::TestJsonAnnotations::Reader TestJsonAnnotations2::Reader::getCycle() const {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::TestJsonAnnotations::Builder TestJsonAnnotations2::Builder::getCycle() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::TestJsonAnnotations::Pipeline TestJsonAnnotations2::Pipeline::getCycle() {
  return  ::capnp::TestJsonAnnotations::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TestJsonAnnotations2::Builder::setCycle( ::capnp::TestJsonAnnotations::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::TestJsonAnnotations::Builder TestJsonAnnotations2::Builder::initCycle() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations2::Builder::adoptCycle(
    ::capnp::Orphan< ::capnp::TestJsonAnnotations>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::TestJsonAnnotations> TestJsonAnnotations2::Builder::disownCycle() {
  return ::capnp::_::PointerHelpers< ::capnp::TestJsonAnnotations>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::capnp::TestJsonAnnotations3::Which TestJsonAnnotations3::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::capnp::TestJsonAnnotations3::Which TestJsonAnnotations3::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool TestJsonAnnotations3::Reader::isFoo() const {
  return which() == TestJsonAnnotations3::FOO;
}
inline bool TestJsonAnnotations3::Builder::isFoo() {
  return which() == TestJsonAnnotations3::FOO;
}
inline  ::uint32_t TestJsonAnnotations3::Reader::getFoo() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations3::FOO),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestJsonAnnotations3::Builder::getFoo() {
  KJ_IREQUIRE((which() == TestJsonAnnotations3::FOO),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestJsonAnnotations3::Builder::setFoo( ::uint32_t value) {
  _builder.setDataField<TestJsonAnnotations3::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, TestJsonAnnotations3::FOO);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TestJsonAnnotations3::Reader::isBar() const {
  return which() == TestJsonAnnotations3::BAR;
}
inline bool TestJsonAnnotations3::Builder::isBar() {
  return which() == TestJsonAnnotations3::BAR;
}
inline bool TestJsonAnnotations3::Reader::hasBar() const {
  if (which() != TestJsonAnnotations3::BAR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestJsonAnnotations3::Builder::hasBar() {
  if (which() != TestJsonAnnotations3::BAR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::TestFlattenedStruct::Reader TestJsonAnnotations3::Reader::getBar() const {
  KJ_IREQUIRE((which() == TestJsonAnnotations3::BAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::TestFlattenedStruct>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::TestFlattenedStruct::Builder TestJsonAnnotations3::Builder::getBar() {
  KJ_IREQUIRE((which() == TestJsonAnnotations3::BAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::TestFlattenedStruct>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations3::Builder::setBar( ::capnp::TestFlattenedStruct::Reader value) {
  _builder.setDataField<TestJsonAnnotations3::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, TestJsonAnnotations3::BAR);
  ::capnp::_::PointerHelpers< ::capnp::TestFlattenedStruct>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::TestFlattenedStruct::Builder TestJsonAnnotations3::Builder::initBar() {
  _builder.setDataField<TestJsonAnnotations3::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, TestJsonAnnotations3::BAR);
  return ::capnp::_::PointerHelpers< ::capnp::TestFlattenedStruct>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestJsonAnnotations3::Builder::adoptBar(
    ::capnp::Orphan< ::capnp::TestFlattenedStruct>&& value) {
  _builder.setDataField<TestJsonAnnotations3::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, TestJsonAnnotations3::BAR);
  ::capnp::_::PointerHelpers< ::capnp::TestFlattenedStruct>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::TestFlattenedStruct> TestJsonAnnotations3::Builder::disownBar() {
  KJ_IREQUIRE((which() == TestJsonAnnotations3::BAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::TestFlattenedStruct>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TestFlattenedStruct::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestFlattenedStruct::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestFlattenedStruct::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestFlattenedStruct::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestFlattenedStruct::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestFlattenedStruct::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestFlattenedStruct::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestFlattenedStruct::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::capnp::TestBase64Union::Which TestBase64Union::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::capnp::TestBase64Union::Which TestBase64Union::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TestBase64Union::Reader::isFoo() const {
  return which() == TestBase64Union::FOO;
}
inline bool TestBase64Union::Builder::isFoo() {
  return which() == TestBase64Union::FOO;
}
inline bool TestBase64Union::Reader::hasFoo() const {
  if (which() != TestBase64Union::FOO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestBase64Union::Builder::hasFoo() {
  if (which() != TestBase64Union::FOO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TestBase64Union::Reader::getFoo() const {
  KJ_IREQUIRE((which() == TestBase64Union::FOO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TestBase64Union::Builder::getFoo() {
  KJ_IREQUIRE((which() == TestBase64Union::FOO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestBase64Union::Builder::setFoo( ::capnp::Data::Reader value) {
  _builder.setDataField<TestBase64Union::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TestBase64Union::FOO);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TestBase64Union::Builder::initFoo(unsigned int size) {
  _builder.setDataField<TestBase64Union::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TestBase64Union::FOO);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestBase64Union::Builder::adoptFoo(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<TestBase64Union::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TestBase64Union::FOO);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestBase64Union::Builder::disownFoo() {
  KJ_IREQUIRE((which() == TestBase64Union::FOO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TestBase64Union::Reader::isBar() const {
  return which() == TestBase64Union::BAR;
}
inline bool TestBase64Union::Builder::isBar() {
  return which() == TestBase64Union::BAR;
}
inline bool TestBase64Union::Reader::hasBar() const {
  if (which() != TestBase64Union::BAR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestBase64Union::Builder::hasBar() {
  if (which() != TestBase64Union::BAR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestBase64Union::Reader::getBar() const {
  KJ_IREQUIRE((which() == TestBase64Union::BAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestBase64Union::Builder::getBar() {
  KJ_IREQUIRE((which() == TestBase64Union::BAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestBase64Union::Builder::setBar( ::capnp::Text::Reader value) {
  _builder.setDataField<TestBase64Union::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TestBase64Union::BAR);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestBase64Union::Builder::initBar(unsigned int size) {
  _builder.setDataField<TestBase64Union::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TestBase64Union::BAR);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestBase64Union::Builder::adoptBar(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<TestBase64Union::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TestBase64Union::BAR);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestBase64Union::Builder::disownBar() {
  KJ_IREQUIRE((which() == TestBase64Union::BAR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

